// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.45.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names

import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;

import 'package:meta/meta.dart';
import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;

part 'mirrorx_core.freezed.dart';

abstract class MirrorXCore {
  Future<void> initLogger({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitLoggerConstMeta;

  Future<ConfigProperties?> configRead(
      {required String path, required String key, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConfigReadConstMeta;

  Future<void> configSave(
      {required String path,
      required String key,
      required ConfigProperties properties,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConfigSaveConstMeta;

  Future<void> signalingDial({required DialRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignalingDialConstMeta;

  Future<RegisterResponse> signalingRegister(
      {required RegisterRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignalingRegisterConstMeta;

  Stream<PublishMessage> signalingSubscribe(
      {required SubscribeRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignalingSubscribeConstMeta;

  Future<HeartbeatResponse> signalingHeartbeat(
      {required HeartbeatRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignalingHeartbeatConstMeta;

  Future<VisitResponse> signalingVisit(
      {required VisitRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignalingVisitConstMeta;

  Future<KeyExchangeResponse> signalingKeyExchange(
      {required KeyExchangeRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignalingKeyExchangeConstMeta;

  Future<void> endpointConnect({required ConnectRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEndpointConnectConstMeta;

  Future<void> endpointHandshake({required HandshakeRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEndpointHandshakeConstMeta;

  Future<NegotiateVisitDesktopParamsResponse>
      endpointNegotiateVisitDesktopParams(
          {required NegotiateVisitDesktopParamsRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kEndpointNegotiateVisitDesktopParamsConstMeta;

  Future<NegotiateSelectMonitorResponse> endpointNegotiateSelectMonitor(
      {required NegotiateSelectMonitorRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEndpointNegotiateSelectMonitorConstMeta;

  Future<void> endpointNegotiateFinished(
      {required NegotiateFinishedRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEndpointNegotiateFinishedConstMeta;

  Future<void> endpointInput({required InputReqeust req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEndpointInputConstMeta;
}

enum AudioSampleFormat {
  I16,
  U16,
  F32,
}

enum AudioSampleRate {
  HZ8000,
  HZ12000,
  HZ160000,
  HZ240000,
  HZ480000,
}

class ConfigProperties {
  final String deviceId;
  final String deviceFingerPrint;
  final String devicePassword;

  ConfigProperties({
    required this.deviceId,
    required this.deviceFingerPrint,
    required this.devicePassword,
  });
}

class ConnectRequest {
  final String activeDeviceId;
  final String passiveDeviceId;
  final String addr;

  ConnectRequest({
    required this.activeDeviceId,
    required this.passiveDeviceId,
    required this.addr,
  });
}

class DialRequest {
  final String uri;

  DialRequest({
    required this.uri,
  });
}

class HandshakeRequest {
  final String activeDeviceId;
  final String passiveDeviceId;
  final String visitCredentials;
  final Uint8List openingKeyBytes;
  final Uint8List openingNonceBytes;
  final Uint8List sealingKeyBytes;
  final Uint8List sealingNonceBytes;

  HandshakeRequest({
    required this.activeDeviceId,
    required this.passiveDeviceId,
    required this.visitCredentials,
    required this.openingKeyBytes,
    required this.openingNonceBytes,
    required this.sealingKeyBytes,
    required this.sealingNonceBytes,
  });
}

class HeartbeatRequest {
  final String localDeviceId;
  final int timestamp;

  HeartbeatRequest({
    required this.localDeviceId,
    required this.timestamp,
  });
}

class HeartbeatResponse {
  final int timestamp;

  HeartbeatResponse({
    required this.timestamp,
  });
}

@freezed
class InputEvent with _$InputEvent {
  const factory InputEvent.mouse(
    MouseEvent field0,
  ) = InputEvent_Mouse;
  const factory InputEvent.keyboard(
    KeyboardEvent field0,
  ) = InputEvent_Keyboard;
}

class InputReqeust {
  final String activeDeviceId;
  final String passiveDeviceId;
  final InputEvent event;

  InputReqeust({
    required this.activeDeviceId,
    required this.passiveDeviceId,
    required this.event,
  });
}

class KeyExchangeRequest {
  final String localDeviceId;
  final String remoteDeviceId;
  final String password;

  KeyExchangeRequest({
    required this.localDeviceId,
    required this.remoteDeviceId,
    required this.password,
  });
}

class KeyExchangeResponse {
  final Uint8List openingKeyBytes;
  final Uint8List openingNonceBytes;
  final Uint8List sealingKeyBytes;
  final Uint8List sealingNonceBytes;

  KeyExchangeResponse({
    required this.openingKeyBytes,
    required this.openingNonceBytes,
    required this.sealingKeyBytes,
    required this.sealingNonceBytes,
  });
}

@freezed
class KeyboardEvent with _$KeyboardEvent {
  const factory KeyboardEvent.keyUp(
    KeyboardKey field0,
  ) = KeyboardEvent_KeyUp;
  const factory KeyboardEvent.keyDown(
    KeyboardKey field0,
  ) = KeyboardEvent_KeyDown;
}

enum KeyboardKey {
  A,
  B,
  C,
  D,
  E,
  F,
  G,
  H,
  I,
  J,
  K,
  L,
  M,
  N,
  O,
  P,
  Q,
  R,
  S,
  T,
  U,
  V,
  W,
  X,
  Y,
  Z,
  BackQuote,
  Digit0,
  Digit1,
  Digit2,
  Digit3,
  Digit4,
  Digit5,
  Digit6,
  Digit7,
  Digit8,
  Digit9,
  Minus,
  Equal,
  Tab,
  CapsLock,
  LeftShift,
  LeftControl,
  LeftAlt,
  LeftMeta,
  Space,
  RightMeta,
  RightControl,
  RightAlt,
  RightShift,
  Comma,
  Period,
  Slash,
  Semicolon,
  QuoteSingle,
  Enter,
  BracketLeft,
  BracketRight,
  BackSlash,
  Backspace,
  NumLock,
  NumpadEquals,
  NumpadDivide,
  NumpadMultiply,
  NumpadSubtract,
  NumpadAdd,
  NumpadEnter,
  Numpad0,
  Numpad1,
  Numpad2,
  Numpad3,
  Numpad4,
  Numpad5,
  Numpad6,
  Numpad7,
  Numpad8,
  Numpad9,
  NumpadDecimal,
  ArrowLeft,
  ArrowUp,
  ArrowRight,
  ArrowDown,
  Escape,
  PrintScreen,
  ScrollLock,
  Pause,
  Insert,
  Delete,
  Home,
  End,
  PageUp,
  PageDown,
  F1,
  F2,
  F3,
  F4,
  F5,
  F6,
  F7,
  F8,
  F9,
  F10,
  F11,
  F12,
  Fn,
}

class MonitorDescription {
  final String id;
  final String name;
  final int frameRate;
  final int width;
  final int height;
  final bool isPrimary;
  final Uint8List screenShot;

  MonitorDescription({
    required this.id,
    required this.name,
    required this.frameRate,
    required this.width,
    required this.height,
    required this.isPrimary,
    required this.screenShot,
  });
}

@freezed
class MouseEvent with _$MouseEvent {
  const factory MouseEvent.mouseUp(
    MouseKey field0,
    double field1,
    double field2,
  ) = MouseEvent_MouseUp;
  const factory MouseEvent.mouseDown(
    MouseKey field0,
    double field1,
    double field2,
  ) = MouseEvent_MouseDown;
  const factory MouseEvent.mouseMove(
    MouseKey field0,
    double field1,
    double field2,
  ) = MouseEvent_MouseMove;
  const factory MouseEvent.mouseScrollWheel(
    double field0,
  ) = MouseEvent_MouseScrollWheel;
}

enum MouseKey {
  None,
  Left,
  Right,
  Wheel,
  SideForward,
  SideBack,
}

class NegotiateFinishedRequest {
  final String activeDeviceId;
  final String passiveDeviceId;
  final String selectedMonitorId;
  final int expectFrameRate;

  NegotiateFinishedRequest({
    required this.activeDeviceId,
    required this.passiveDeviceId,
    required this.selectedMonitorId,
    required this.expectFrameRate,
  });
}

class NegotiateSelectMonitorRequest {
  final String activeDeviceId;
  final String passiveDeviceId;

  NegotiateSelectMonitorRequest({
    required this.activeDeviceId,
    required this.passiveDeviceId,
  });
}

class NegotiateSelectMonitorResponse {
  final List<MonitorDescription> monitorDescriptions;

  NegotiateSelectMonitorResponse({
    required this.monitorDescriptions,
  });
}

class NegotiateVisitDesktopParamsRequest {
  final String activeDeviceId;
  final String passiveDeviceId;

  NegotiateVisitDesktopParamsRequest({
    required this.activeDeviceId,
    required this.passiveDeviceId,
  });
}

class NegotiateVisitDesktopParamsResponse {
  final VideoCodec videoCodec;
  final AudioSampleRate audioSampleRate;
  final AudioSampleFormat audioSampleFormat;
  final bool audioDualChannel;
  final String osType;
  final String osVersion;

  NegotiateVisitDesktopParamsResponse({
    required this.videoCodec,
    required this.audioSampleRate,
    required this.audioSampleFormat,
    required this.audioDualChannel,
    required this.osType,
    required this.osVersion,
  });
}

@freezed
class PublishMessage with _$PublishMessage {
  const factory PublishMessage.streamClosed() = PublishMessage_StreamClosed;
  const factory PublishMessage.visitRequest({
    required String activeDeviceId,
    required String passiveDeviceId,
    required ResourceType resourceType,
  }) = PublishMessage_VisitRequest;
}

class RegisterRequest {
  final String? localDeviceId;
  final String deviceFingerPrint;

  RegisterRequest({
    this.localDeviceId,
    required this.deviceFingerPrint,
  });
}

class RegisterResponse {
  final String deviceId;

  RegisterResponse({
    required this.deviceId,
  });
}

enum ResourceType {
  Desktop,
  Files,
}

class SubscribeRequest {
  final String localDeviceId;
  final String deviceFingerPrint;
  final String configPath;

  SubscribeRequest({
    required this.localDeviceId,
    required this.deviceFingerPrint,
    required this.configPath,
  });
}

enum VideoCodec {
  H264,
  HEVC,
  VP8,
  VP9,
}

class VisitRequest {
  final String localDeviceId;
  final String remoteDeviceId;
  final ResourceType resourceType;

  VisitRequest({
    required this.localDeviceId,
    required this.remoteDeviceId,
    required this.resourceType,
  });
}

class VisitResponse {
  final bool allow;

  VisitResponse({
    required this.allow,
  });
}

class MirrorXCoreImpl implements MirrorXCore {
  final MirrorXCorePlatform _platform;
  factory MirrorXCoreImpl(ExternalLibrary dylib) =>
      MirrorXCoreImpl.raw(MirrorXCorePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory MirrorXCoreImpl.wasm(FutureOr<WasmModule> module) =>
      MirrorXCoreImpl(module as ExternalLibrary);
  MirrorXCoreImpl.raw(this._platform);
  Future<void> initLogger({dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_init_logger(port_),
        parseSuccessData: _wire2api_unit,
        constMeta: kInitLoggerConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kInitLoggerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_logger",
        argNames: [],
      );

  Future<ConfigProperties?> configRead(
          {required String path, required String key, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_config_read(port_,
            _platform.api2wire_String(path), _platform.api2wire_String(key)),
        parseSuccessData: _wire2api_opt_box_autoadd_config_properties,
        constMeta: kConfigReadConstMeta,
        argValues: [path, key],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kConfigReadConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "config_read",
        argNames: ["path", "key"],
      );

  Future<void> configSave(
          {required String path,
          required String key,
          required ConfigProperties properties,
          dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_config_save(
            port_,
            _platform.api2wire_String(path),
            _platform.api2wire_String(key),
            _platform.api2wire_box_autoadd_config_properties(properties)),
        parseSuccessData: _wire2api_unit,
        constMeta: kConfigSaveConstMeta,
        argValues: [path, key, properties],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kConfigSaveConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "config_save",
        argNames: ["path", "key", "properties"],
      );

  Future<void> signalingDial({required DialRequest req, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_signaling_dial(
            port_, _platform.api2wire_box_autoadd_dial_request(req)),
        parseSuccessData: _wire2api_unit,
        constMeta: kSignalingDialConstMeta,
        argValues: [req],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kSignalingDialConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "signaling_dial",
        argNames: ["req"],
      );

  Future<RegisterResponse> signalingRegister(
          {required RegisterRequest req, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_signaling_register(
            port_, _platform.api2wire_box_autoadd_register_request(req)),
        parseSuccessData: _wire2api_register_response,
        constMeta: kSignalingRegisterConstMeta,
        argValues: [req],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kSignalingRegisterConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "signaling_register",
        argNames: ["req"],
      );

  Stream<PublishMessage> signalingSubscribe(
          {required SubscribeRequest req, dynamic hint}) =>
      _platform.executeStream(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_signaling_subscribe(
            port_, _platform.api2wire_box_autoadd_subscribe_request(req)),
        parseSuccessData: _wire2api_publish_message,
        constMeta: kSignalingSubscribeConstMeta,
        argValues: [req],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kSignalingSubscribeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "signaling_subscribe",
        argNames: ["req"],
      );

  Future<HeartbeatResponse> signalingHeartbeat(
          {required HeartbeatRequest req, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_signaling_heartbeat(
            port_, _platform.api2wire_box_autoadd_heartbeat_request(req)),
        parseSuccessData: _wire2api_heartbeat_response,
        constMeta: kSignalingHeartbeatConstMeta,
        argValues: [req],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kSignalingHeartbeatConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "signaling_heartbeat",
        argNames: ["req"],
      );

  Future<VisitResponse> signalingVisit(
          {required VisitRequest req, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_signaling_visit(
            port_, _platform.api2wire_box_autoadd_visit_request(req)),
        parseSuccessData: _wire2api_visit_response,
        constMeta: kSignalingVisitConstMeta,
        argValues: [req],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kSignalingVisitConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "signaling_visit",
        argNames: ["req"],
      );

  Future<KeyExchangeResponse> signalingKeyExchange(
          {required KeyExchangeRequest req, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_signaling_key_exchange(
            port_, _platform.api2wire_box_autoadd_key_exchange_request(req)),
        parseSuccessData: _wire2api_key_exchange_response,
        constMeta: kSignalingKeyExchangeConstMeta,
        argValues: [req],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kSignalingKeyExchangeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "signaling_key_exchange",
        argNames: ["req"],
      );

  Future<void> endpointConnect({required ConnectRequest req, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_endpoint_connect(
            port_, _platform.api2wire_box_autoadd_connect_request(req)),
        parseSuccessData: _wire2api_unit,
        constMeta: kEndpointConnectConstMeta,
        argValues: [req],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kEndpointConnectConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "endpoint_connect",
        argNames: ["req"],
      );

  Future<void> endpointHandshake(
          {required HandshakeRequest req, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_endpoint_handshake(
            port_, _platform.api2wire_box_autoadd_handshake_request(req)),
        parseSuccessData: _wire2api_unit,
        constMeta: kEndpointHandshakeConstMeta,
        argValues: [req],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kEndpointHandshakeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "endpoint_handshake",
        argNames: ["req"],
      );

  Future<NegotiateVisitDesktopParamsResponse>
      endpointNegotiateVisitDesktopParams(
              {required NegotiateVisitDesktopParamsRequest req,
              dynamic hint}) =>
          _platform.executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner
                .wire_endpoint_negotiate_visit_desktop_params(
                    port_,
                    _platform
                        .api2wire_box_autoadd_negotiate_visit_desktop_params_request(
                            req)),
            parseSuccessData: _wire2api_negotiate_visit_desktop_params_response,
            constMeta: kEndpointNegotiateVisitDesktopParamsConstMeta,
            argValues: [req],
            hint: hint,
          ));

  FlutterRustBridgeTaskConstMeta
      get kEndpointNegotiateVisitDesktopParamsConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "endpoint_negotiate_visit_desktop_params",
            argNames: ["req"],
          );

  Future<NegotiateSelectMonitorResponse> endpointNegotiateSelectMonitor(
          {required NegotiateSelectMonitorRequest req, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner
            .wire_endpoint_negotiate_select_monitor(
                port_,
                _platform.api2wire_box_autoadd_negotiate_select_monitor_request(
                    req)),
        parseSuccessData: _wire2api_negotiate_select_monitor_response,
        constMeta: kEndpointNegotiateSelectMonitorConstMeta,
        argValues: [req],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kEndpointNegotiateSelectMonitorConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "endpoint_negotiate_select_monitor",
        argNames: ["req"],
      );

  Future<void> endpointNegotiateFinished(
          {required NegotiateFinishedRequest req, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_endpoint_negotiate_finished(
            port_,
            _platform.api2wire_box_autoadd_negotiate_finished_request(req)),
        parseSuccessData: _wire2api_unit,
        constMeta: kEndpointNegotiateFinishedConstMeta,
        argValues: [req],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kEndpointNegotiateFinishedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "endpoint_negotiate_finished",
        argNames: ["req"],
      );

  Future<void> endpointInput({required InputReqeust req, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_endpoint_input(
            port_, _platform.api2wire_box_autoadd_input_reqeust(req)),
        parseSuccessData: _wire2api_unit,
        constMeta: kEndpointInputConstMeta,
        argValues: [req],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kEndpointInputConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "endpoint_input",
        argNames: ["req"],
      );
}

// Section: api2wire

@protected
double api2wire_f32(double raw) {
  return raw;
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_keyboard_key(KeyboardKey raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_mouse_key(MouseKey raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_resource_type(ResourceType raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: wire2api

String _wire2api_String(dynamic raw) {
  return raw as String;
}

AudioSampleFormat _wire2api_audio_sample_format(dynamic raw) {
  return AudioSampleFormat.values[raw];
}

AudioSampleRate _wire2api_audio_sample_rate(dynamic raw) {
  return AudioSampleRate.values[raw];
}

bool _wire2api_bool(dynamic raw) {
  return raw as bool;
}

ConfigProperties _wire2api_box_autoadd_config_properties(dynamic raw) {
  return _wire2api_config_properties(raw);
}

ConfigProperties _wire2api_config_properties(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 3)
    throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
  return ConfigProperties(
    deviceId: _wire2api_String(arr[0]),
    deviceFingerPrint: _wire2api_String(arr[1]),
    devicePassword: _wire2api_String(arr[2]),
  );
}

HeartbeatResponse _wire2api_heartbeat_response(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 1)
    throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
  return HeartbeatResponse(
    timestamp: _wire2api_u32(arr[0]),
  );
}

int _wire2api_i32(dynamic raw) {
  return raw as int;
}

KeyExchangeResponse _wire2api_key_exchange_response(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 4)
    throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
  return KeyExchangeResponse(
    openingKeyBytes: _wire2api_uint_8_list(arr[0]),
    openingNonceBytes: _wire2api_uint_8_list(arr[1]),
    sealingKeyBytes: _wire2api_uint_8_list(arr[2]),
    sealingNonceBytes: _wire2api_uint_8_list(arr[3]),
  );
}

List<MonitorDescription> _wire2api_list_monitor_description(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_monitor_description).toList();
}

MonitorDescription _wire2api_monitor_description(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 7)
    throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
  return MonitorDescription(
    id: _wire2api_String(arr[0]),
    name: _wire2api_String(arr[1]),
    frameRate: _wire2api_u8(arr[2]),
    width: _wire2api_u16(arr[3]),
    height: _wire2api_u16(arr[4]),
    isPrimary: _wire2api_bool(arr[5]),
    screenShot: _wire2api_uint_8_list(arr[6]),
  );
}

NegotiateSelectMonitorResponse _wire2api_negotiate_select_monitor_response(
    dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 1)
    throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
  return NegotiateSelectMonitorResponse(
    monitorDescriptions: _wire2api_list_monitor_description(arr[0]),
  );
}

NegotiateVisitDesktopParamsResponse
    _wire2api_negotiate_visit_desktop_params_response(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 6)
    throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
  return NegotiateVisitDesktopParamsResponse(
    videoCodec: _wire2api_video_codec(arr[0]),
    audioSampleRate: _wire2api_audio_sample_rate(arr[1]),
    audioSampleFormat: _wire2api_audio_sample_format(arr[2]),
    audioDualChannel: _wire2api_bool(arr[3]),
    osType: _wire2api_String(arr[4]),
    osVersion: _wire2api_String(arr[5]),
  );
}

ConfigProperties? _wire2api_opt_box_autoadd_config_properties(dynamic raw) {
  return raw == null ? null : _wire2api_box_autoadd_config_properties(raw);
}

PublishMessage _wire2api_publish_message(dynamic raw) {
  switch (raw[0]) {
    case 0:
      return PublishMessage_StreamClosed();
    case 1:
      return PublishMessage_VisitRequest(
        activeDeviceId: _wire2api_String(raw[1]),
        passiveDeviceId: _wire2api_String(raw[2]),
        resourceType: _wire2api_resource_type(raw[3]),
      );
    default:
      throw Exception("unreachable");
  }
}

RegisterResponse _wire2api_register_response(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 1)
    throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
  return RegisterResponse(
    deviceId: _wire2api_String(arr[0]),
  );
}

ResourceType _wire2api_resource_type(dynamic raw) {
  return ResourceType.values[raw];
}

int _wire2api_u16(dynamic raw) {
  return raw as int;
}

int _wire2api_u32(dynamic raw) {
  return raw as int;
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

void _wire2api_unit(dynamic raw) {
  return;
}

VideoCodec _wire2api_video_codec(dynamic raw) {
  return VideoCodec.values[raw];
}

VisitResponse _wire2api_visit_response(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 1)
    throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
  return VisitResponse(
    allow: _wire2api_bool(arr[0]),
  );
}

class MirrorXCorePlatform extends FlutterRustBridgeBase<MirrorXCoreWire> {
  MirrorXCorePlatform(ffi.DynamicLibrary dylib) : super(MirrorXCoreWire(dylib));
// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_ConfigProperties> api2wire_box_autoadd_config_properties(
      ConfigProperties raw) {
    final ptr = inner.new_box_autoadd_config_properties_0();
    _api_fill_to_wire_config_properties(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ConnectRequest> api2wire_box_autoadd_connect_request(
      ConnectRequest raw) {
    final ptr = inner.new_box_autoadd_connect_request_0();
    _api_fill_to_wire_connect_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_DialRequest> api2wire_box_autoadd_dial_request(
      DialRequest raw) {
    final ptr = inner.new_box_autoadd_dial_request_0();
    _api_fill_to_wire_dial_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_HandshakeRequest> api2wire_box_autoadd_handshake_request(
      HandshakeRequest raw) {
    final ptr = inner.new_box_autoadd_handshake_request_0();
    _api_fill_to_wire_handshake_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_HeartbeatRequest> api2wire_box_autoadd_heartbeat_request(
      HeartbeatRequest raw) {
    final ptr = inner.new_box_autoadd_heartbeat_request_0();
    _api_fill_to_wire_heartbeat_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_InputReqeust> api2wire_box_autoadd_input_reqeust(
      InputReqeust raw) {
    final ptr = inner.new_box_autoadd_input_reqeust_0();
    _api_fill_to_wire_input_reqeust(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_KeyExchangeRequest>
      api2wire_box_autoadd_key_exchange_request(KeyExchangeRequest raw) {
    final ptr = inner.new_box_autoadd_key_exchange_request_0();
    _api_fill_to_wire_key_exchange_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_KeyboardEvent> api2wire_box_autoadd_keyboard_event(
      KeyboardEvent raw) {
    final ptr = inner.new_box_autoadd_keyboard_event_0();
    _api_fill_to_wire_keyboard_event(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_MouseEvent> api2wire_box_autoadd_mouse_event(
      MouseEvent raw) {
    final ptr = inner.new_box_autoadd_mouse_event_0();
    _api_fill_to_wire_mouse_event(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_NegotiateFinishedRequest>
      api2wire_box_autoadd_negotiate_finished_request(
          NegotiateFinishedRequest raw) {
    final ptr = inner.new_box_autoadd_negotiate_finished_request_0();
    _api_fill_to_wire_negotiate_finished_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_NegotiateSelectMonitorRequest>
      api2wire_box_autoadd_negotiate_select_monitor_request(
          NegotiateSelectMonitorRequest raw) {
    final ptr = inner.new_box_autoadd_negotiate_select_monitor_request_0();
    _api_fill_to_wire_negotiate_select_monitor_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_NegotiateVisitDesktopParamsRequest>
      api2wire_box_autoadd_negotiate_visit_desktop_params_request(
          NegotiateVisitDesktopParamsRequest raw) {
    final ptr =
        inner.new_box_autoadd_negotiate_visit_desktop_params_request_0();
    _api_fill_to_wire_negotiate_visit_desktop_params_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_RegisterRequest> api2wire_box_autoadd_register_request(
      RegisterRequest raw) {
    final ptr = inner.new_box_autoadd_register_request_0();
    _api_fill_to_wire_register_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_SubscribeRequest> api2wire_box_autoadd_subscribe_request(
      SubscribeRequest raw) {
    final ptr = inner.new_box_autoadd_subscribe_request_0();
    _api_fill_to_wire_subscribe_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_VisitRequest> api2wire_box_autoadd_visit_request(
      VisitRequest raw) {
    final ptr = inner.new_box_autoadd_visit_request_0();
    _api_fill_to_wire_visit_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_InputEvent> api2wire_box_input_event(InputEvent raw) {
    final ptr = inner.new_box_input_event_0();
    _api_fill_to_wire_input_event(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

// Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_config_properties(
      ConfigProperties apiObj, ffi.Pointer<wire_ConfigProperties> wireObj) {
    _api_fill_to_wire_config_properties(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_connect_request(
      ConnectRequest apiObj, ffi.Pointer<wire_ConnectRequest> wireObj) {
    _api_fill_to_wire_connect_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_dial_request(
      DialRequest apiObj, ffi.Pointer<wire_DialRequest> wireObj) {
    _api_fill_to_wire_dial_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_handshake_request(
      HandshakeRequest apiObj, ffi.Pointer<wire_HandshakeRequest> wireObj) {
    _api_fill_to_wire_handshake_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_heartbeat_request(
      HeartbeatRequest apiObj, ffi.Pointer<wire_HeartbeatRequest> wireObj) {
    _api_fill_to_wire_heartbeat_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_input_reqeust(
      InputReqeust apiObj, ffi.Pointer<wire_InputReqeust> wireObj) {
    _api_fill_to_wire_input_reqeust(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_key_exchange_request(
      KeyExchangeRequest apiObj, ffi.Pointer<wire_KeyExchangeRequest> wireObj) {
    _api_fill_to_wire_key_exchange_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_keyboard_event(
      KeyboardEvent apiObj, ffi.Pointer<wire_KeyboardEvent> wireObj) {
    _api_fill_to_wire_keyboard_event(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_mouse_event(
      MouseEvent apiObj, ffi.Pointer<wire_MouseEvent> wireObj) {
    _api_fill_to_wire_mouse_event(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_negotiate_finished_request(
      NegotiateFinishedRequest apiObj,
      ffi.Pointer<wire_NegotiateFinishedRequest> wireObj) {
    _api_fill_to_wire_negotiate_finished_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_negotiate_select_monitor_request(
      NegotiateSelectMonitorRequest apiObj,
      ffi.Pointer<wire_NegotiateSelectMonitorRequest> wireObj) {
    _api_fill_to_wire_negotiate_select_monitor_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_negotiate_visit_desktop_params_request(
      NegotiateVisitDesktopParamsRequest apiObj,
      ffi.Pointer<wire_NegotiateVisitDesktopParamsRequest> wireObj) {
    _api_fill_to_wire_negotiate_visit_desktop_params_request(
        apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_register_request(
      RegisterRequest apiObj, ffi.Pointer<wire_RegisterRequest> wireObj) {
    _api_fill_to_wire_register_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_subscribe_request(
      SubscribeRequest apiObj, ffi.Pointer<wire_SubscribeRequest> wireObj) {
    _api_fill_to_wire_subscribe_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_visit_request(
      VisitRequest apiObj, ffi.Pointer<wire_VisitRequest> wireObj) {
    _api_fill_to_wire_visit_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_input_event(
      InputEvent apiObj, ffi.Pointer<wire_InputEvent> wireObj) {
    _api_fill_to_wire_input_event(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_config_properties(
      ConfigProperties apiObj, wire_ConfigProperties wireObj) {
    wireObj.device_id = api2wire_String(apiObj.deviceId);
    wireObj.device_finger_print = api2wire_String(apiObj.deviceFingerPrint);
    wireObj.device_password = api2wire_String(apiObj.devicePassword);
  }

  void _api_fill_to_wire_connect_request(
      ConnectRequest apiObj, wire_ConnectRequest wireObj) {
    wireObj.active_device_id = api2wire_String(apiObj.activeDeviceId);
    wireObj.passive_device_id = api2wire_String(apiObj.passiveDeviceId);
    wireObj.addr = api2wire_String(apiObj.addr);
  }

  void _api_fill_to_wire_dial_request(
      DialRequest apiObj, wire_DialRequest wireObj) {
    wireObj.uri = api2wire_String(apiObj.uri);
  }

  void _api_fill_to_wire_handshake_request(
      HandshakeRequest apiObj, wire_HandshakeRequest wireObj) {
    wireObj.active_device_id = api2wire_String(apiObj.activeDeviceId);
    wireObj.passive_device_id = api2wire_String(apiObj.passiveDeviceId);
    wireObj.visit_credentials = api2wire_String(apiObj.visitCredentials);
    wireObj.opening_key_bytes = api2wire_uint_8_list(apiObj.openingKeyBytes);
    wireObj.opening_nonce_bytes =
        api2wire_uint_8_list(apiObj.openingNonceBytes);
    wireObj.sealing_key_bytes = api2wire_uint_8_list(apiObj.sealingKeyBytes);
    wireObj.sealing_nonce_bytes =
        api2wire_uint_8_list(apiObj.sealingNonceBytes);
  }

  void _api_fill_to_wire_heartbeat_request(
      HeartbeatRequest apiObj, wire_HeartbeatRequest wireObj) {
    wireObj.local_device_id = api2wire_String(apiObj.localDeviceId);
    wireObj.timestamp = api2wire_u32(apiObj.timestamp);
  }

  void _api_fill_to_wire_input_event(
      InputEvent apiObj, wire_InputEvent wireObj) {
    if (apiObj is InputEvent_Mouse) {
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_InputEvent_Mouse();
      wireObj.kind.ref.Mouse.ref.field0 =
          api2wire_box_autoadd_mouse_event(apiObj.field0);
      return;
    }
    if (apiObj is InputEvent_Keyboard) {
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_InputEvent_Keyboard();
      wireObj.kind.ref.Keyboard.ref.field0 =
          api2wire_box_autoadd_keyboard_event(apiObj.field0);
      return;
    }
  }

  void _api_fill_to_wire_input_reqeust(
      InputReqeust apiObj, wire_InputReqeust wireObj) {
    wireObj.active_device_id = api2wire_String(apiObj.activeDeviceId);
    wireObj.passive_device_id = api2wire_String(apiObj.passiveDeviceId);
    wireObj.event = api2wire_box_input_event(apiObj.event);
  }

  void _api_fill_to_wire_key_exchange_request(
      KeyExchangeRequest apiObj, wire_KeyExchangeRequest wireObj) {
    wireObj.local_device_id = api2wire_String(apiObj.localDeviceId);
    wireObj.remote_device_id = api2wire_String(apiObj.remoteDeviceId);
    wireObj.password = api2wire_String(apiObj.password);
  }

  void _api_fill_to_wire_keyboard_event(
      KeyboardEvent apiObj, wire_KeyboardEvent wireObj) {
    if (apiObj is KeyboardEvent_KeyUp) {
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_KeyboardEvent_KeyUp();
      wireObj.kind.ref.KeyUp.ref.field0 = api2wire_keyboard_key(apiObj.field0);
      return;
    }
    if (apiObj is KeyboardEvent_KeyDown) {
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_KeyboardEvent_KeyDown();
      wireObj.kind.ref.KeyDown.ref.field0 =
          api2wire_keyboard_key(apiObj.field0);
      return;
    }
  }

  void _api_fill_to_wire_mouse_event(
      MouseEvent apiObj, wire_MouseEvent wireObj) {
    if (apiObj is MouseEvent_MouseUp) {
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_MouseEvent_MouseUp();
      wireObj.kind.ref.MouseUp.ref.field0 = api2wire_mouse_key(apiObj.field0);
      wireObj.kind.ref.MouseUp.ref.field1 = api2wire_f32(apiObj.field1);
      wireObj.kind.ref.MouseUp.ref.field2 = api2wire_f32(apiObj.field2);
      return;
    }
    if (apiObj is MouseEvent_MouseDown) {
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_MouseEvent_MouseDown();
      wireObj.kind.ref.MouseDown.ref.field0 = api2wire_mouse_key(apiObj.field0);
      wireObj.kind.ref.MouseDown.ref.field1 = api2wire_f32(apiObj.field1);
      wireObj.kind.ref.MouseDown.ref.field2 = api2wire_f32(apiObj.field2);
      return;
    }
    if (apiObj is MouseEvent_MouseMove) {
      wireObj.tag = 2;
      wireObj.kind = inner.inflate_MouseEvent_MouseMove();
      wireObj.kind.ref.MouseMove.ref.field0 = api2wire_mouse_key(apiObj.field0);
      wireObj.kind.ref.MouseMove.ref.field1 = api2wire_f32(apiObj.field1);
      wireObj.kind.ref.MouseMove.ref.field2 = api2wire_f32(apiObj.field2);
      return;
    }
    if (apiObj is MouseEvent_MouseScrollWheel) {
      wireObj.tag = 3;
      wireObj.kind = inner.inflate_MouseEvent_MouseScrollWheel();
      wireObj.kind.ref.MouseScrollWheel.ref.field0 =
          api2wire_f32(apiObj.field0);
      return;
    }
  }

  void _api_fill_to_wire_negotiate_finished_request(
      NegotiateFinishedRequest apiObj, wire_NegotiateFinishedRequest wireObj) {
    wireObj.active_device_id = api2wire_String(apiObj.activeDeviceId);
    wireObj.passive_device_id = api2wire_String(apiObj.passiveDeviceId);
    wireObj.selected_monitor_id = api2wire_String(apiObj.selectedMonitorId);
    wireObj.expect_frame_rate = api2wire_u8(apiObj.expectFrameRate);
  }

  void _api_fill_to_wire_negotiate_select_monitor_request(
      NegotiateSelectMonitorRequest apiObj,
      wire_NegotiateSelectMonitorRequest wireObj) {
    wireObj.active_device_id = api2wire_String(apiObj.activeDeviceId);
    wireObj.passive_device_id = api2wire_String(apiObj.passiveDeviceId);
  }

  void _api_fill_to_wire_negotiate_visit_desktop_params_request(
      NegotiateVisitDesktopParamsRequest apiObj,
      wire_NegotiateVisitDesktopParamsRequest wireObj) {
    wireObj.active_device_id = api2wire_String(apiObj.activeDeviceId);
    wireObj.passive_device_id = api2wire_String(apiObj.passiveDeviceId);
  }

  void _api_fill_to_wire_register_request(
      RegisterRequest apiObj, wire_RegisterRequest wireObj) {
    wireObj.local_device_id = api2wire_opt_String(apiObj.localDeviceId);
    wireObj.device_finger_print = api2wire_String(apiObj.deviceFingerPrint);
  }

  void _api_fill_to_wire_subscribe_request(
      SubscribeRequest apiObj, wire_SubscribeRequest wireObj) {
    wireObj.local_device_id = api2wire_String(apiObj.localDeviceId);
    wireObj.device_finger_print = api2wire_String(apiObj.deviceFingerPrint);
    wireObj.config_path = api2wire_String(apiObj.configPath);
  }

  void _api_fill_to_wire_visit_request(
      VisitRequest apiObj, wire_VisitRequest wireObj) {
    wireObj.local_device_id = api2wire_String(apiObj.localDeviceId);
    wireObj.remote_device_id = api2wire_String(apiObj.remoteDeviceId);
    wireObj.resource_type = api2wire_resource_type(apiObj.resourceType);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class MirrorXCoreWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MirrorXCoreWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MirrorXCoreWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  void wire_init_logger(
    int port_,
  ) {
    return _wire_init_logger(
      port_,
    );
  }

  late final _wire_init_loggerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_init_logger');
  late final _wire_init_logger =
      _wire_init_loggerPtr.asFunction<void Function(int)>();

  void wire_config_read(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
    ffi.Pointer<wire_uint_8_list> key,
  ) {
    return _wire_config_read(
      port_,
      path,
      key,
    );
  }

  late final _wire_config_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_config_read');
  late final _wire_config_read = _wire_config_readPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_config_save(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
    ffi.Pointer<wire_uint_8_list> key,
    ffi.Pointer<wire_ConfigProperties> properties,
  ) {
    return _wire_config_save(
      port_,
      path,
      key,
      properties,
    );
  }

  late final _wire_config_savePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_ConfigProperties>)>>('wire_config_save');
  late final _wire_config_save = _wire_config_savePtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_ConfigProperties>)>();

  void wire_signaling_dial(
    int port_,
    ffi.Pointer<wire_DialRequest> req,
  ) {
    return _wire_signaling_dial(
      port_,
      req,
    );
  }

  late final _wire_signaling_dialPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_DialRequest>)>>('wire_signaling_dial');
  late final _wire_signaling_dial = _wire_signaling_dialPtr
      .asFunction<void Function(int, ffi.Pointer<wire_DialRequest>)>();

  void wire_signaling_register(
    int port_,
    ffi.Pointer<wire_RegisterRequest> req,
  ) {
    return _wire_signaling_register(
      port_,
      req,
    );
  }

  late final _wire_signaling_registerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_RegisterRequest>)>>('wire_signaling_register');
  late final _wire_signaling_register = _wire_signaling_registerPtr
      .asFunction<void Function(int, ffi.Pointer<wire_RegisterRequest>)>();

  void wire_signaling_subscribe(
    int port_,
    ffi.Pointer<wire_SubscribeRequest> req,
  ) {
    return _wire_signaling_subscribe(
      port_,
      req,
    );
  }

  late final _wire_signaling_subscribePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_SubscribeRequest>)>>('wire_signaling_subscribe');
  late final _wire_signaling_subscribe = _wire_signaling_subscribePtr
      .asFunction<void Function(int, ffi.Pointer<wire_SubscribeRequest>)>();

  void wire_signaling_heartbeat(
    int port_,
    ffi.Pointer<wire_HeartbeatRequest> req,
  ) {
    return _wire_signaling_heartbeat(
      port_,
      req,
    );
  }

  late final _wire_signaling_heartbeatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_HeartbeatRequest>)>>('wire_signaling_heartbeat');
  late final _wire_signaling_heartbeat = _wire_signaling_heartbeatPtr
      .asFunction<void Function(int, ffi.Pointer<wire_HeartbeatRequest>)>();

  void wire_signaling_visit(
    int port_,
    ffi.Pointer<wire_VisitRequest> req,
  ) {
    return _wire_signaling_visit(
      port_,
      req,
    );
  }

  late final _wire_signaling_visitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_VisitRequest>)>>('wire_signaling_visit');
  late final _wire_signaling_visit = _wire_signaling_visitPtr
      .asFunction<void Function(int, ffi.Pointer<wire_VisitRequest>)>();

  void wire_signaling_key_exchange(
    int port_,
    ffi.Pointer<wire_KeyExchangeRequest> req,
  ) {
    return _wire_signaling_key_exchange(
      port_,
      req,
    );
  }

  late final _wire_signaling_key_exchangePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_KeyExchangeRequest>)>>(
      'wire_signaling_key_exchange');
  late final _wire_signaling_key_exchange = _wire_signaling_key_exchangePtr
      .asFunction<void Function(int, ffi.Pointer<wire_KeyExchangeRequest>)>();

  void wire_endpoint_connect(
    int port_,
    ffi.Pointer<wire_ConnectRequest> req,
  ) {
    return _wire_endpoint_connect(
      port_,
      req,
    );
  }

  late final _wire_endpoint_connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_ConnectRequest>)>>('wire_endpoint_connect');
  late final _wire_endpoint_connect = _wire_endpoint_connectPtr
      .asFunction<void Function(int, ffi.Pointer<wire_ConnectRequest>)>();

  void wire_endpoint_handshake(
    int port_,
    ffi.Pointer<wire_HandshakeRequest> req,
  ) {
    return _wire_endpoint_handshake(
      port_,
      req,
    );
  }

  late final _wire_endpoint_handshakePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_HandshakeRequest>)>>('wire_endpoint_handshake');
  late final _wire_endpoint_handshake = _wire_endpoint_handshakePtr
      .asFunction<void Function(int, ffi.Pointer<wire_HandshakeRequest>)>();

  void wire_endpoint_negotiate_visit_desktop_params(
    int port_,
    ffi.Pointer<wire_NegotiateVisitDesktopParamsRequest> req,
  ) {
    return _wire_endpoint_negotiate_visit_desktop_params(
      port_,
      req,
    );
  }

  late final _wire_endpoint_negotiate_visit_desktop_paramsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64,
                  ffi.Pointer<wire_NegotiateVisitDesktopParamsRequest>)>>(
      'wire_endpoint_negotiate_visit_desktop_params');
  late final _wire_endpoint_negotiate_visit_desktop_params =
      _wire_endpoint_negotiate_visit_desktop_paramsPtr.asFunction<
          void Function(
              int, ffi.Pointer<wire_NegotiateVisitDesktopParamsRequest>)>();

  void wire_endpoint_negotiate_select_monitor(
    int port_,
    ffi.Pointer<wire_NegotiateSelectMonitorRequest> req,
  ) {
    return _wire_endpoint_negotiate_select_monitor(
      port_,
      req,
    );
  }

  late final _wire_endpoint_negotiate_select_monitorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_NegotiateSelectMonitorRequest>)>>(
      'wire_endpoint_negotiate_select_monitor');
  late final _wire_endpoint_negotiate_select_monitor =
      _wire_endpoint_negotiate_select_monitorPtr.asFunction<
          void Function(
              int, ffi.Pointer<wire_NegotiateSelectMonitorRequest>)>();

  void wire_endpoint_negotiate_finished(
    int port_,
    ffi.Pointer<wire_NegotiateFinishedRequest> req,
  ) {
    return _wire_endpoint_negotiate_finished(
      port_,
      req,
    );
  }

  late final _wire_endpoint_negotiate_finishedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_NegotiateFinishedRequest>)>>(
      'wire_endpoint_negotiate_finished');
  late final _wire_endpoint_negotiate_finished =
      _wire_endpoint_negotiate_finishedPtr.asFunction<
          void Function(int, ffi.Pointer<wire_NegotiateFinishedRequest>)>();

  void wire_endpoint_input(
    int port_,
    ffi.Pointer<wire_InputReqeust> req,
  ) {
    return _wire_endpoint_input(
      port_,
      req,
    );
  }

  late final _wire_endpoint_inputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_InputReqeust>)>>('wire_endpoint_input');
  late final _wire_endpoint_input = _wire_endpoint_inputPtr
      .asFunction<void Function(int, ffi.Pointer<wire_InputReqeust>)>();

  ffi.Pointer<wire_ConfigProperties> new_box_autoadd_config_properties_0() {
    return _new_box_autoadd_config_properties_0();
  }

  late final _new_box_autoadd_config_properties_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_ConfigProperties> Function()>>(
      'new_box_autoadd_config_properties_0');
  late final _new_box_autoadd_config_properties_0 =
      _new_box_autoadd_config_properties_0Ptr
          .asFunction<ffi.Pointer<wire_ConfigProperties> Function()>();

  ffi.Pointer<wire_ConnectRequest> new_box_autoadd_connect_request_0() {
    return _new_box_autoadd_connect_request_0();
  }

  late final _new_box_autoadd_connect_request_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_ConnectRequest> Function()>>(
          'new_box_autoadd_connect_request_0');
  late final _new_box_autoadd_connect_request_0 =
      _new_box_autoadd_connect_request_0Ptr
          .asFunction<ffi.Pointer<wire_ConnectRequest> Function()>();

  ffi.Pointer<wire_DialRequest> new_box_autoadd_dial_request_0() {
    return _new_box_autoadd_dial_request_0();
  }

  late final _new_box_autoadd_dial_request_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_DialRequest> Function()>>(
          'new_box_autoadd_dial_request_0');
  late final _new_box_autoadd_dial_request_0 =
      _new_box_autoadd_dial_request_0Ptr
          .asFunction<ffi.Pointer<wire_DialRequest> Function()>();

  ffi.Pointer<wire_HandshakeRequest> new_box_autoadd_handshake_request_0() {
    return _new_box_autoadd_handshake_request_0();
  }

  late final _new_box_autoadd_handshake_request_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_HandshakeRequest> Function()>>(
      'new_box_autoadd_handshake_request_0');
  late final _new_box_autoadd_handshake_request_0 =
      _new_box_autoadd_handshake_request_0Ptr
          .asFunction<ffi.Pointer<wire_HandshakeRequest> Function()>();

  ffi.Pointer<wire_HeartbeatRequest> new_box_autoadd_heartbeat_request_0() {
    return _new_box_autoadd_heartbeat_request_0();
  }

  late final _new_box_autoadd_heartbeat_request_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_HeartbeatRequest> Function()>>(
      'new_box_autoadd_heartbeat_request_0');
  late final _new_box_autoadd_heartbeat_request_0 =
      _new_box_autoadd_heartbeat_request_0Ptr
          .asFunction<ffi.Pointer<wire_HeartbeatRequest> Function()>();

  ffi.Pointer<wire_InputReqeust> new_box_autoadd_input_reqeust_0() {
    return _new_box_autoadd_input_reqeust_0();
  }

  late final _new_box_autoadd_input_reqeust_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_InputReqeust> Function()>>(
          'new_box_autoadd_input_reqeust_0');
  late final _new_box_autoadd_input_reqeust_0 =
      _new_box_autoadd_input_reqeust_0Ptr
          .asFunction<ffi.Pointer<wire_InputReqeust> Function()>();

  ffi.Pointer<wire_KeyExchangeRequest>
      new_box_autoadd_key_exchange_request_0() {
    return _new_box_autoadd_key_exchange_request_0();
  }

  late final _new_box_autoadd_key_exchange_request_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_KeyExchangeRequest> Function()>>(
      'new_box_autoadd_key_exchange_request_0');
  late final _new_box_autoadd_key_exchange_request_0 =
      _new_box_autoadd_key_exchange_request_0Ptr
          .asFunction<ffi.Pointer<wire_KeyExchangeRequest> Function()>();

  ffi.Pointer<wire_KeyboardEvent> new_box_autoadd_keyboard_event_0() {
    return _new_box_autoadd_keyboard_event_0();
  }

  late final _new_box_autoadd_keyboard_event_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_KeyboardEvent> Function()>>(
          'new_box_autoadd_keyboard_event_0');
  late final _new_box_autoadd_keyboard_event_0 =
      _new_box_autoadd_keyboard_event_0Ptr
          .asFunction<ffi.Pointer<wire_KeyboardEvent> Function()>();

  ffi.Pointer<wire_MouseEvent> new_box_autoadd_mouse_event_0() {
    return _new_box_autoadd_mouse_event_0();
  }

  late final _new_box_autoadd_mouse_event_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_MouseEvent> Function()>>(
          'new_box_autoadd_mouse_event_0');
  late final _new_box_autoadd_mouse_event_0 = _new_box_autoadd_mouse_event_0Ptr
      .asFunction<ffi.Pointer<wire_MouseEvent> Function()>();

  ffi.Pointer<wire_NegotiateFinishedRequest>
      new_box_autoadd_negotiate_finished_request_0() {
    return _new_box_autoadd_negotiate_finished_request_0();
  }

  late final _new_box_autoadd_negotiate_finished_request_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_NegotiateFinishedRequest>
              Function()>>('new_box_autoadd_negotiate_finished_request_0');
  late final _new_box_autoadd_negotiate_finished_request_0 =
      _new_box_autoadd_negotiate_finished_request_0Ptr
          .asFunction<ffi.Pointer<wire_NegotiateFinishedRequest> Function()>();

  ffi.Pointer<wire_NegotiateSelectMonitorRequest>
      new_box_autoadd_negotiate_select_monitor_request_0() {
    return _new_box_autoadd_negotiate_select_monitor_request_0();
  }

  late final _new_box_autoadd_negotiate_select_monitor_request_0Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_NegotiateSelectMonitorRequest> Function()>>(
      'new_box_autoadd_negotiate_select_monitor_request_0');
  late final _new_box_autoadd_negotiate_select_monitor_request_0 =
      _new_box_autoadd_negotiate_select_monitor_request_0Ptr.asFunction<
          ffi.Pointer<wire_NegotiateSelectMonitorRequest> Function()>();

  ffi.Pointer<wire_NegotiateVisitDesktopParamsRequest>
      new_box_autoadd_negotiate_visit_desktop_params_request_0() {
    return _new_box_autoadd_negotiate_visit_desktop_params_request_0();
  }

  late final _new_box_autoadd_negotiate_visit_desktop_params_request_0Ptr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<wire_NegotiateVisitDesktopParamsRequest>
                      Function()>>(
          'new_box_autoadd_negotiate_visit_desktop_params_request_0');
  late final _new_box_autoadd_negotiate_visit_desktop_params_request_0 =
      _new_box_autoadd_negotiate_visit_desktop_params_request_0Ptr.asFunction<
          ffi.Pointer<wire_NegotiateVisitDesktopParamsRequest> Function()>();

  ffi.Pointer<wire_RegisterRequest> new_box_autoadd_register_request_0() {
    return _new_box_autoadd_register_request_0();
  }

  late final _new_box_autoadd_register_request_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_RegisterRequest> Function()>>(
          'new_box_autoadd_register_request_0');
  late final _new_box_autoadd_register_request_0 =
      _new_box_autoadd_register_request_0Ptr
          .asFunction<ffi.Pointer<wire_RegisterRequest> Function()>();

  ffi.Pointer<wire_SubscribeRequest> new_box_autoadd_subscribe_request_0() {
    return _new_box_autoadd_subscribe_request_0();
  }

  late final _new_box_autoadd_subscribe_request_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_SubscribeRequest> Function()>>(
      'new_box_autoadd_subscribe_request_0');
  late final _new_box_autoadd_subscribe_request_0 =
      _new_box_autoadd_subscribe_request_0Ptr
          .asFunction<ffi.Pointer<wire_SubscribeRequest> Function()>();

  ffi.Pointer<wire_VisitRequest> new_box_autoadd_visit_request_0() {
    return _new_box_autoadd_visit_request_0();
  }

  late final _new_box_autoadd_visit_request_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_VisitRequest> Function()>>(
          'new_box_autoadd_visit_request_0');
  late final _new_box_autoadd_visit_request_0 =
      _new_box_autoadd_visit_request_0Ptr
          .asFunction<ffi.Pointer<wire_VisitRequest> Function()>();

  ffi.Pointer<wire_InputEvent> new_box_input_event_0() {
    return _new_box_input_event_0();
  }

  late final _new_box_input_event_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_InputEvent> Function()>>(
          'new_box_input_event_0');
  late final _new_box_input_event_0 = _new_box_input_event_0Ptr
      .asFunction<ffi.Pointer<wire_InputEvent> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  ffi.Pointer<InputEventKind> inflate_InputEvent_Mouse() {
    return _inflate_InputEvent_Mouse();
  }

  late final _inflate_InputEvent_MousePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<InputEventKind> Function()>>(
          'inflate_InputEvent_Mouse');
  late final _inflate_InputEvent_Mouse = _inflate_InputEvent_MousePtr
      .asFunction<ffi.Pointer<InputEventKind> Function()>();

  ffi.Pointer<InputEventKind> inflate_InputEvent_Keyboard() {
    return _inflate_InputEvent_Keyboard();
  }

  late final _inflate_InputEvent_KeyboardPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<InputEventKind> Function()>>(
          'inflate_InputEvent_Keyboard');
  late final _inflate_InputEvent_Keyboard = _inflate_InputEvent_KeyboardPtr
      .asFunction<ffi.Pointer<InputEventKind> Function()>();

  ffi.Pointer<KeyboardEventKind> inflate_KeyboardEvent_KeyUp() {
    return _inflate_KeyboardEvent_KeyUp();
  }

  late final _inflate_KeyboardEvent_KeyUpPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<KeyboardEventKind> Function()>>(
          'inflate_KeyboardEvent_KeyUp');
  late final _inflate_KeyboardEvent_KeyUp = _inflate_KeyboardEvent_KeyUpPtr
      .asFunction<ffi.Pointer<KeyboardEventKind> Function()>();

  ffi.Pointer<KeyboardEventKind> inflate_KeyboardEvent_KeyDown() {
    return _inflate_KeyboardEvent_KeyDown();
  }

  late final _inflate_KeyboardEvent_KeyDownPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<KeyboardEventKind> Function()>>(
          'inflate_KeyboardEvent_KeyDown');
  late final _inflate_KeyboardEvent_KeyDown = _inflate_KeyboardEvent_KeyDownPtr
      .asFunction<ffi.Pointer<KeyboardEventKind> Function()>();

  ffi.Pointer<MouseEventKind> inflate_MouseEvent_MouseUp() {
    return _inflate_MouseEvent_MouseUp();
  }

  late final _inflate_MouseEvent_MouseUpPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<MouseEventKind> Function()>>(
          'inflate_MouseEvent_MouseUp');
  late final _inflate_MouseEvent_MouseUp = _inflate_MouseEvent_MouseUpPtr
      .asFunction<ffi.Pointer<MouseEventKind> Function()>();

  ffi.Pointer<MouseEventKind> inflate_MouseEvent_MouseDown() {
    return _inflate_MouseEvent_MouseDown();
  }

  late final _inflate_MouseEvent_MouseDownPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<MouseEventKind> Function()>>(
          'inflate_MouseEvent_MouseDown');
  late final _inflate_MouseEvent_MouseDown = _inflate_MouseEvent_MouseDownPtr
      .asFunction<ffi.Pointer<MouseEventKind> Function()>();

  ffi.Pointer<MouseEventKind> inflate_MouseEvent_MouseMove() {
    return _inflate_MouseEvent_MouseMove();
  }

  late final _inflate_MouseEvent_MouseMovePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<MouseEventKind> Function()>>(
          'inflate_MouseEvent_MouseMove');
  late final _inflate_MouseEvent_MouseMove = _inflate_MouseEvent_MouseMovePtr
      .asFunction<ffi.Pointer<MouseEventKind> Function()>();

  ffi.Pointer<MouseEventKind> inflate_MouseEvent_MouseScrollWheel() {
    return _inflate_MouseEvent_MouseScrollWheel();
  }

  late final _inflate_MouseEvent_MouseScrollWheelPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<MouseEventKind> Function()>>(
          'inflate_MouseEvent_MouseScrollWheel');
  late final _inflate_MouseEvent_MouseScrollWheel =
      _inflate_MouseEvent_MouseScrollWheelPtr
          .asFunction<ffi.Pointer<MouseEventKind> Function()>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_ConfigProperties extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> device_id;

  external ffi.Pointer<wire_uint_8_list> device_finger_print;

  external ffi.Pointer<wire_uint_8_list> device_password;
}

class wire_DialRequest extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> uri;
}

class wire_RegisterRequest extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> local_device_id;

  external ffi.Pointer<wire_uint_8_list> device_finger_print;
}

class wire_SubscribeRequest extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> local_device_id;

  external ffi.Pointer<wire_uint_8_list> device_finger_print;

  external ffi.Pointer<wire_uint_8_list> config_path;
}

class wire_HeartbeatRequest extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> local_device_id;

  @ffi.Uint32()
  external int timestamp;
}

class wire_VisitRequest extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> local_device_id;

  external ffi.Pointer<wire_uint_8_list> remote_device_id;

  @ffi.Int32()
  external int resource_type;
}

class wire_KeyExchangeRequest extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> local_device_id;

  external ffi.Pointer<wire_uint_8_list> remote_device_id;

  external ffi.Pointer<wire_uint_8_list> password;
}

class wire_ConnectRequest extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> active_device_id;

  external ffi.Pointer<wire_uint_8_list> passive_device_id;

  external ffi.Pointer<wire_uint_8_list> addr;
}

class wire_HandshakeRequest extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> active_device_id;

  external ffi.Pointer<wire_uint_8_list> passive_device_id;

  external ffi.Pointer<wire_uint_8_list> visit_credentials;

  external ffi.Pointer<wire_uint_8_list> opening_key_bytes;

  external ffi.Pointer<wire_uint_8_list> opening_nonce_bytes;

  external ffi.Pointer<wire_uint_8_list> sealing_key_bytes;

  external ffi.Pointer<wire_uint_8_list> sealing_nonce_bytes;
}

class wire_NegotiateVisitDesktopParamsRequest extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> active_device_id;

  external ffi.Pointer<wire_uint_8_list> passive_device_id;
}

class wire_NegotiateSelectMonitorRequest extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> active_device_id;

  external ffi.Pointer<wire_uint_8_list> passive_device_id;
}

class wire_NegotiateFinishedRequest extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> active_device_id;

  external ffi.Pointer<wire_uint_8_list> passive_device_id;

  external ffi.Pointer<wire_uint_8_list> selected_monitor_id;

  @ffi.Uint8()
  external int expect_frame_rate;
}

class wire_MouseEvent_MouseUp extends ffi.Struct {
  @ffi.Int32()
  external int field0;

  @ffi.Float()
  external double field1;

  @ffi.Float()
  external double field2;
}

class wire_MouseEvent_MouseDown extends ffi.Struct {
  @ffi.Int32()
  external int field0;

  @ffi.Float()
  external double field1;

  @ffi.Float()
  external double field2;
}

class wire_MouseEvent_MouseMove extends ffi.Struct {
  @ffi.Int32()
  external int field0;

  @ffi.Float()
  external double field1;

  @ffi.Float()
  external double field2;
}

class wire_MouseEvent_MouseScrollWheel extends ffi.Struct {
  @ffi.Float()
  external double field0;
}

class MouseEventKind extends ffi.Union {
  external ffi.Pointer<wire_MouseEvent_MouseUp> MouseUp;

  external ffi.Pointer<wire_MouseEvent_MouseDown> MouseDown;

  external ffi.Pointer<wire_MouseEvent_MouseMove> MouseMove;

  external ffi.Pointer<wire_MouseEvent_MouseScrollWheel> MouseScrollWheel;
}

class wire_MouseEvent extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<MouseEventKind> kind;
}

class wire_InputEvent_Mouse extends ffi.Struct {
  external ffi.Pointer<wire_MouseEvent> field0;
}

class wire_KeyboardEvent_KeyUp extends ffi.Struct {
  @ffi.Int32()
  external int field0;
}

class wire_KeyboardEvent_KeyDown extends ffi.Struct {
  @ffi.Int32()
  external int field0;
}

class KeyboardEventKind extends ffi.Union {
  external ffi.Pointer<wire_KeyboardEvent_KeyUp> KeyUp;

  external ffi.Pointer<wire_KeyboardEvent_KeyDown> KeyDown;
}

class wire_KeyboardEvent extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<KeyboardEventKind> kind;
}

class wire_InputEvent_Keyboard extends ffi.Struct {
  external ffi.Pointer<wire_KeyboardEvent> field0;
}

class InputEventKind extends ffi.Union {
  external ffi.Pointer<wire_InputEvent_Mouse> Mouse;

  external ffi.Pointer<wire_InputEvent_Keyboard> Keyboard;
}

class wire_InputEvent extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<InputEventKind> kind;
}

class wire_InputReqeust extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> active_device_id;

  external ffi.Pointer<wire_uint_8_list> passive_device_id;

  external ffi.Pointer<wire_InputEvent> event;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
