// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.45.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names

import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;

import 'package:meta/meta.dart';
import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;

part 'mirrorx_core.freezed.dart';

abstract class MirrorXCore {
  Future<void> loggerInit({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLoggerInitConstMeta;

  Future<ConfigProperties?> configRead(
      {required String path, required String key, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConfigReadConstMeta;

  Future<void> configSave(
      {required String path,
      required String key,
      required ConfigProperties properties,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConfigSaveConstMeta;

  Future<void> signalingDial({required DialRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignalingDialConstMeta;

  Future<RegisterResponse> signalingRegister(
      {required RegisterRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignalingRegisterConstMeta;

  Stream<PublishMessage> signalingSubscribe(
      {required SubscribeRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignalingSubscribeConstMeta;

  Future<HeartbeatResponse> signalingHeartbeat(
      {required HeartbeatRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignalingHeartbeatConstMeta;

  Future<VisitResponse> signalingVisit(
      {required VisitRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignalingVisitConstMeta;

  Future<KeyExchangeResponse> signalingKeyExchange(
      {required KeyExchangeRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignalingKeyExchangeConstMeta;
}

class ConfigProperties {
  final String deviceId;
  final String deviceFingerPrint;
  final String devicePassword;

  ConfigProperties({
    required this.deviceId,
    required this.deviceFingerPrint,
    required this.devicePassword,
  });
}

class DialRequest {
  final String uri;

  DialRequest({
    required this.uri,
  });
}

class HeartbeatRequest {
  final String localDeviceId;
  final int timestamp;

  HeartbeatRequest({
    required this.localDeviceId,
    required this.timestamp,
  });
}

class HeartbeatResponse {
  final int timestamp;

  HeartbeatResponse({
    required this.timestamp,
  });
}

class KeyExchangeRequest {
  final String localDeviceId;
  final String remoteDeviceId;
  final String password;

  KeyExchangeRequest({
    required this.localDeviceId,
    required this.remoteDeviceId,
    required this.password,
  });
}

class KeyExchangeResponse {
  final Uint8List openingKeyBytes;
  final Uint8List openingNonceBytes;
  final Uint8List sealingKeyBytes;
  final Uint8List sealingNonceBytes;

  KeyExchangeResponse({
    required this.openingKeyBytes,
    required this.openingNonceBytes,
    required this.sealingKeyBytes,
    required this.sealingNonceBytes,
  });
}

@freezed
class PublishMessage with _$PublishMessage {
  const factory PublishMessage.streamClosed() = PublishMessage_StreamClosed;
  const factory PublishMessage.visitRequest({
    required String activeDeviceId,
    required String passiveDeviceId,
    required ResourceType resourceType,
  }) = PublishMessage_VisitRequest;
}

class RegisterRequest {
  final String? localDeviceId;
  final String deviceFingerPrint;

  RegisterRequest({
    this.localDeviceId,
    required this.deviceFingerPrint,
  });
}

class RegisterResponse {
  final String deviceId;

  RegisterResponse({
    required this.deviceId,
  });
}

enum ResourceType {
  Desktop,
  Files,
}

class SubscribeRequest {
  final String localDeviceId;
  final String deviceFingerPrint;
  final String configPath;

  SubscribeRequest({
    required this.localDeviceId,
    required this.deviceFingerPrint,
    required this.configPath,
  });
}

class VisitRequest {
  final String localDeviceId;
  final String remoteDeviceId;
  final ResourceType resourceType;

  VisitRequest({
    required this.localDeviceId,
    required this.remoteDeviceId,
    required this.resourceType,
  });
}

class VisitResponse {
  final bool allow;

  VisitResponse({
    required this.allow,
  });
}

class MirrorXCoreImpl implements MirrorXCore {
  final MirrorXCorePlatform _platform;
  factory MirrorXCoreImpl(ExternalLibrary dylib) =>
      MirrorXCoreImpl.raw(MirrorXCorePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory MirrorXCoreImpl.wasm(FutureOr<WasmModule> module) =>
      MirrorXCoreImpl(module as ExternalLibrary);
  MirrorXCoreImpl.raw(this._platform);
  Future<void> loggerInit({dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_logger_init(port_),
        parseSuccessData: _wire2api_unit,
        constMeta: kLoggerInitConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kLoggerInitConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "logger_init",
        argNames: [],
      );

  Future<ConfigProperties?> configRead(
          {required String path, required String key, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_config_read(port_,
            _platform.api2wire_String(path), _platform.api2wire_String(key)),
        parseSuccessData: _wire2api_opt_box_autoadd_config_properties,
        constMeta: kConfigReadConstMeta,
        argValues: [path, key],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kConfigReadConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "config_read",
        argNames: ["path", "key"],
      );

  Future<void> configSave(
          {required String path,
          required String key,
          required ConfigProperties properties,
          dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_config_save(
            port_,
            _platform.api2wire_String(path),
            _platform.api2wire_String(key),
            _platform.api2wire_box_autoadd_config_properties(properties)),
        parseSuccessData: _wire2api_unit,
        constMeta: kConfigSaveConstMeta,
        argValues: [path, key, properties],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kConfigSaveConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "config_save",
        argNames: ["path", "key", "properties"],
      );

  Future<void> signalingDial({required DialRequest req, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_signaling_dial(
            port_, _platform.api2wire_box_autoadd_dial_request(req)),
        parseSuccessData: _wire2api_unit,
        constMeta: kSignalingDialConstMeta,
        argValues: [req],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kSignalingDialConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "signaling_dial",
        argNames: ["req"],
      );

  Future<RegisterResponse> signalingRegister(
          {required RegisterRequest req, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_signaling_register(
            port_, _platform.api2wire_box_autoadd_register_request(req)),
        parseSuccessData: _wire2api_register_response,
        constMeta: kSignalingRegisterConstMeta,
        argValues: [req],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kSignalingRegisterConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "signaling_register",
        argNames: ["req"],
      );

  Stream<PublishMessage> signalingSubscribe(
          {required SubscribeRequest req, dynamic hint}) =>
      _platform.executeStream(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_signaling_subscribe(
            port_, _platform.api2wire_box_autoadd_subscribe_request(req)),
        parseSuccessData: _wire2api_publish_message,
        constMeta: kSignalingSubscribeConstMeta,
        argValues: [req],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kSignalingSubscribeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "signaling_subscribe",
        argNames: ["req"],
      );

  Future<HeartbeatResponse> signalingHeartbeat(
          {required HeartbeatRequest req, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_signaling_heartbeat(
            port_, _platform.api2wire_box_autoadd_heartbeat_request(req)),
        parseSuccessData: _wire2api_heartbeat_response,
        constMeta: kSignalingHeartbeatConstMeta,
        argValues: [req],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kSignalingHeartbeatConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "signaling_heartbeat",
        argNames: ["req"],
      );

  Future<VisitResponse> signalingVisit(
          {required VisitRequest req, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_signaling_visit(
            port_, _platform.api2wire_box_autoadd_visit_request(req)),
        parseSuccessData: _wire2api_visit_response,
        constMeta: kSignalingVisitConstMeta,
        argValues: [req],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kSignalingVisitConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "signaling_visit",
        argNames: ["req"],
      );

  Future<KeyExchangeResponse> signalingKeyExchange(
          {required KeyExchangeRequest req, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_signaling_key_exchange(
            port_, _platform.api2wire_box_autoadd_key_exchange_request(req)),
        parseSuccessData: _wire2api_key_exchange_response,
        constMeta: kSignalingKeyExchangeConstMeta,
        argValues: [req],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kSignalingKeyExchangeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "signaling_key_exchange",
        argNames: ["req"],
      );
}

// Section: api2wire

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_resource_type(ResourceType raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: wire2api

String _wire2api_String(dynamic raw) {
  return raw as String;
}

bool _wire2api_bool(dynamic raw) {
  return raw as bool;
}

ConfigProperties _wire2api_box_autoadd_config_properties(dynamic raw) {
  return _wire2api_config_properties(raw);
}

ConfigProperties _wire2api_config_properties(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 3)
    throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
  return ConfigProperties(
    deviceId: _wire2api_String(arr[0]),
    deviceFingerPrint: _wire2api_String(arr[1]),
    devicePassword: _wire2api_String(arr[2]),
  );
}

HeartbeatResponse _wire2api_heartbeat_response(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 1)
    throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
  return HeartbeatResponse(
    timestamp: _wire2api_u32(arr[0]),
  );
}

int _wire2api_i32(dynamic raw) {
  return raw as int;
}

KeyExchangeResponse _wire2api_key_exchange_response(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 4)
    throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
  return KeyExchangeResponse(
    openingKeyBytes: _wire2api_uint_8_list(arr[0]),
    openingNonceBytes: _wire2api_uint_8_list(arr[1]),
    sealingKeyBytes: _wire2api_uint_8_list(arr[2]),
    sealingNonceBytes: _wire2api_uint_8_list(arr[3]),
  );
}

ConfigProperties? _wire2api_opt_box_autoadd_config_properties(dynamic raw) {
  return raw == null ? null : _wire2api_box_autoadd_config_properties(raw);
}

PublishMessage _wire2api_publish_message(dynamic raw) {
  switch (raw[0]) {
    case 0:
      return PublishMessage_StreamClosed();
    case 1:
      return PublishMessage_VisitRequest(
        activeDeviceId: _wire2api_String(raw[1]),
        passiveDeviceId: _wire2api_String(raw[2]),
        resourceType: _wire2api_resource_type(raw[3]),
      );
    default:
      throw Exception("unreachable");
  }
}

RegisterResponse _wire2api_register_response(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 1)
    throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
  return RegisterResponse(
    deviceId: _wire2api_String(arr[0]),
  );
}

ResourceType _wire2api_resource_type(dynamic raw) {
  return ResourceType.values[raw];
}

int _wire2api_u32(dynamic raw) {
  return raw as int;
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

void _wire2api_unit(dynamic raw) {
  return;
}

VisitResponse _wire2api_visit_response(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 1)
    throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
  return VisitResponse(
    allow: _wire2api_bool(arr[0]),
  );
}

class MirrorXCorePlatform extends FlutterRustBridgeBase<MirrorXCoreWire> {
  MirrorXCorePlatform(ffi.DynamicLibrary dylib) : super(MirrorXCoreWire(dylib));
// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_ConfigProperties> api2wire_box_autoadd_config_properties(
      ConfigProperties raw) {
    final ptr = inner.new_box_autoadd_config_properties_0();
    _api_fill_to_wire_config_properties(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_DialRequest> api2wire_box_autoadd_dial_request(
      DialRequest raw) {
    final ptr = inner.new_box_autoadd_dial_request_0();
    _api_fill_to_wire_dial_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_HeartbeatRequest> api2wire_box_autoadd_heartbeat_request(
      HeartbeatRequest raw) {
    final ptr = inner.new_box_autoadd_heartbeat_request_0();
    _api_fill_to_wire_heartbeat_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_KeyExchangeRequest>
      api2wire_box_autoadd_key_exchange_request(KeyExchangeRequest raw) {
    final ptr = inner.new_box_autoadd_key_exchange_request_0();
    _api_fill_to_wire_key_exchange_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_RegisterRequest> api2wire_box_autoadd_register_request(
      RegisterRequest raw) {
    final ptr = inner.new_box_autoadd_register_request_0();
    _api_fill_to_wire_register_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_SubscribeRequest> api2wire_box_autoadd_subscribe_request(
      SubscribeRequest raw) {
    final ptr = inner.new_box_autoadd_subscribe_request_0();
    _api_fill_to_wire_subscribe_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_VisitRequest> api2wire_box_autoadd_visit_request(
      VisitRequest raw) {
    final ptr = inner.new_box_autoadd_visit_request_0();
    _api_fill_to_wire_visit_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

// Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_config_properties(
      ConfigProperties apiObj, ffi.Pointer<wire_ConfigProperties> wireObj) {
    _api_fill_to_wire_config_properties(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_dial_request(
      DialRequest apiObj, ffi.Pointer<wire_DialRequest> wireObj) {
    _api_fill_to_wire_dial_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_heartbeat_request(
      HeartbeatRequest apiObj, ffi.Pointer<wire_HeartbeatRequest> wireObj) {
    _api_fill_to_wire_heartbeat_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_key_exchange_request(
      KeyExchangeRequest apiObj, ffi.Pointer<wire_KeyExchangeRequest> wireObj) {
    _api_fill_to_wire_key_exchange_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_register_request(
      RegisterRequest apiObj, ffi.Pointer<wire_RegisterRequest> wireObj) {
    _api_fill_to_wire_register_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_subscribe_request(
      SubscribeRequest apiObj, ffi.Pointer<wire_SubscribeRequest> wireObj) {
    _api_fill_to_wire_subscribe_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_visit_request(
      VisitRequest apiObj, ffi.Pointer<wire_VisitRequest> wireObj) {
    _api_fill_to_wire_visit_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_config_properties(
      ConfigProperties apiObj, wire_ConfigProperties wireObj) {
    wireObj.device_id = api2wire_String(apiObj.deviceId);
    wireObj.device_finger_print = api2wire_String(apiObj.deviceFingerPrint);
    wireObj.device_password = api2wire_String(apiObj.devicePassword);
  }

  void _api_fill_to_wire_dial_request(
      DialRequest apiObj, wire_DialRequest wireObj) {
    wireObj.uri = api2wire_String(apiObj.uri);
  }

  void _api_fill_to_wire_heartbeat_request(
      HeartbeatRequest apiObj, wire_HeartbeatRequest wireObj) {
    wireObj.local_device_id = api2wire_String(apiObj.localDeviceId);
    wireObj.timestamp = api2wire_u32(apiObj.timestamp);
  }

  void _api_fill_to_wire_key_exchange_request(
      KeyExchangeRequest apiObj, wire_KeyExchangeRequest wireObj) {
    wireObj.local_device_id = api2wire_String(apiObj.localDeviceId);
    wireObj.remote_device_id = api2wire_String(apiObj.remoteDeviceId);
    wireObj.password = api2wire_String(apiObj.password);
  }

  void _api_fill_to_wire_register_request(
      RegisterRequest apiObj, wire_RegisterRequest wireObj) {
    wireObj.local_device_id = api2wire_opt_String(apiObj.localDeviceId);
    wireObj.device_finger_print = api2wire_String(apiObj.deviceFingerPrint);
  }

  void _api_fill_to_wire_subscribe_request(
      SubscribeRequest apiObj, wire_SubscribeRequest wireObj) {
    wireObj.local_device_id = api2wire_String(apiObj.localDeviceId);
    wireObj.device_finger_print = api2wire_String(apiObj.deviceFingerPrint);
    wireObj.config_path = api2wire_String(apiObj.configPath);
  }

  void _api_fill_to_wire_visit_request(
      VisitRequest apiObj, wire_VisitRequest wireObj) {
    wireObj.local_device_id = api2wire_String(apiObj.localDeviceId);
    wireObj.remote_device_id = api2wire_String(apiObj.remoteDeviceId);
    wireObj.resource_type = api2wire_resource_type(apiObj.resourceType);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class MirrorXCoreWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MirrorXCoreWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MirrorXCoreWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  void wire_logger_init(
    int port_,
  ) {
    return _wire_logger_init(
      port_,
    );
  }

  late final _wire_logger_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_logger_init');
  late final _wire_logger_init =
      _wire_logger_initPtr.asFunction<void Function(int)>();

  void wire_config_read(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
    ffi.Pointer<wire_uint_8_list> key,
  ) {
    return _wire_config_read(
      port_,
      path,
      key,
    );
  }

  late final _wire_config_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_config_read');
  late final _wire_config_read = _wire_config_readPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_config_save(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
    ffi.Pointer<wire_uint_8_list> key,
    ffi.Pointer<wire_ConfigProperties> properties,
  ) {
    return _wire_config_save(
      port_,
      path,
      key,
      properties,
    );
  }

  late final _wire_config_savePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_ConfigProperties>)>>('wire_config_save');
  late final _wire_config_save = _wire_config_savePtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_ConfigProperties>)>();

  void wire_signaling_dial(
    int port_,
    ffi.Pointer<wire_DialRequest> req,
  ) {
    return _wire_signaling_dial(
      port_,
      req,
    );
  }

  late final _wire_signaling_dialPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_DialRequest>)>>('wire_signaling_dial');
  late final _wire_signaling_dial = _wire_signaling_dialPtr
      .asFunction<void Function(int, ffi.Pointer<wire_DialRequest>)>();

  void wire_signaling_register(
    int port_,
    ffi.Pointer<wire_RegisterRequest> req,
  ) {
    return _wire_signaling_register(
      port_,
      req,
    );
  }

  late final _wire_signaling_registerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_RegisterRequest>)>>('wire_signaling_register');
  late final _wire_signaling_register = _wire_signaling_registerPtr
      .asFunction<void Function(int, ffi.Pointer<wire_RegisterRequest>)>();

  void wire_signaling_subscribe(
    int port_,
    ffi.Pointer<wire_SubscribeRequest> req,
  ) {
    return _wire_signaling_subscribe(
      port_,
      req,
    );
  }

  late final _wire_signaling_subscribePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_SubscribeRequest>)>>('wire_signaling_subscribe');
  late final _wire_signaling_subscribe = _wire_signaling_subscribePtr
      .asFunction<void Function(int, ffi.Pointer<wire_SubscribeRequest>)>();

  void wire_signaling_heartbeat(
    int port_,
    ffi.Pointer<wire_HeartbeatRequest> req,
  ) {
    return _wire_signaling_heartbeat(
      port_,
      req,
    );
  }

  late final _wire_signaling_heartbeatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_HeartbeatRequest>)>>('wire_signaling_heartbeat');
  late final _wire_signaling_heartbeat = _wire_signaling_heartbeatPtr
      .asFunction<void Function(int, ffi.Pointer<wire_HeartbeatRequest>)>();

  void wire_signaling_visit(
    int port_,
    ffi.Pointer<wire_VisitRequest> req,
  ) {
    return _wire_signaling_visit(
      port_,
      req,
    );
  }

  late final _wire_signaling_visitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_VisitRequest>)>>('wire_signaling_visit');
  late final _wire_signaling_visit = _wire_signaling_visitPtr
      .asFunction<void Function(int, ffi.Pointer<wire_VisitRequest>)>();

  void wire_signaling_key_exchange(
    int port_,
    ffi.Pointer<wire_KeyExchangeRequest> req,
  ) {
    return _wire_signaling_key_exchange(
      port_,
      req,
    );
  }

  late final _wire_signaling_key_exchangePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_KeyExchangeRequest>)>>(
      'wire_signaling_key_exchange');
  late final _wire_signaling_key_exchange = _wire_signaling_key_exchangePtr
      .asFunction<void Function(int, ffi.Pointer<wire_KeyExchangeRequest>)>();

  ffi.Pointer<wire_ConfigProperties> new_box_autoadd_config_properties_0() {
    return _new_box_autoadd_config_properties_0();
  }

  late final _new_box_autoadd_config_properties_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_ConfigProperties> Function()>>(
      'new_box_autoadd_config_properties_0');
  late final _new_box_autoadd_config_properties_0 =
      _new_box_autoadd_config_properties_0Ptr
          .asFunction<ffi.Pointer<wire_ConfigProperties> Function()>();

  ffi.Pointer<wire_DialRequest> new_box_autoadd_dial_request_0() {
    return _new_box_autoadd_dial_request_0();
  }

  late final _new_box_autoadd_dial_request_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_DialRequest> Function()>>(
          'new_box_autoadd_dial_request_0');
  late final _new_box_autoadd_dial_request_0 =
      _new_box_autoadd_dial_request_0Ptr
          .asFunction<ffi.Pointer<wire_DialRequest> Function()>();

  ffi.Pointer<wire_HeartbeatRequest> new_box_autoadd_heartbeat_request_0() {
    return _new_box_autoadd_heartbeat_request_0();
  }

  late final _new_box_autoadd_heartbeat_request_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_HeartbeatRequest> Function()>>(
      'new_box_autoadd_heartbeat_request_0');
  late final _new_box_autoadd_heartbeat_request_0 =
      _new_box_autoadd_heartbeat_request_0Ptr
          .asFunction<ffi.Pointer<wire_HeartbeatRequest> Function()>();

  ffi.Pointer<wire_KeyExchangeRequest>
      new_box_autoadd_key_exchange_request_0() {
    return _new_box_autoadd_key_exchange_request_0();
  }

  late final _new_box_autoadd_key_exchange_request_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_KeyExchangeRequest> Function()>>(
      'new_box_autoadd_key_exchange_request_0');
  late final _new_box_autoadd_key_exchange_request_0 =
      _new_box_autoadd_key_exchange_request_0Ptr
          .asFunction<ffi.Pointer<wire_KeyExchangeRequest> Function()>();

  ffi.Pointer<wire_RegisterRequest> new_box_autoadd_register_request_0() {
    return _new_box_autoadd_register_request_0();
  }

  late final _new_box_autoadd_register_request_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_RegisterRequest> Function()>>(
          'new_box_autoadd_register_request_0');
  late final _new_box_autoadd_register_request_0 =
      _new_box_autoadd_register_request_0Ptr
          .asFunction<ffi.Pointer<wire_RegisterRequest> Function()>();

  ffi.Pointer<wire_SubscribeRequest> new_box_autoadd_subscribe_request_0() {
    return _new_box_autoadd_subscribe_request_0();
  }

  late final _new_box_autoadd_subscribe_request_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_SubscribeRequest> Function()>>(
      'new_box_autoadd_subscribe_request_0');
  late final _new_box_autoadd_subscribe_request_0 =
      _new_box_autoadd_subscribe_request_0Ptr
          .asFunction<ffi.Pointer<wire_SubscribeRequest> Function()>();

  ffi.Pointer<wire_VisitRequest> new_box_autoadd_visit_request_0() {
    return _new_box_autoadd_visit_request_0();
  }

  late final _new_box_autoadd_visit_request_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_VisitRequest> Function()>>(
          'new_box_autoadd_visit_request_0');
  late final _new_box_autoadd_visit_request_0 =
      _new_box_autoadd_visit_request_0Ptr
          .asFunction<ffi.Pointer<wire_VisitRequest> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_ConfigProperties extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> device_id;

  external ffi.Pointer<wire_uint_8_list> device_finger_print;

  external ffi.Pointer<wire_uint_8_list> device_password;
}

class wire_DialRequest extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> uri;
}

class wire_RegisterRequest extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> local_device_id;

  external ffi.Pointer<wire_uint_8_list> device_finger_print;
}

class wire_SubscribeRequest extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> local_device_id;

  external ffi.Pointer<wire_uint_8_list> device_finger_print;

  external ffi.Pointer<wire_uint_8_list> config_path;
}

class wire_HeartbeatRequest extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> local_device_id;

  @ffi.Uint32()
  external int timestamp;
}

class wire_VisitRequest extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> local_device_id;

  external ffi.Pointer<wire_uint_8_list> remote_device_id;

  @ffi.Int32()
  external int resource_type;
}

class wire_KeyExchangeRequest extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> local_device_id;

  external ffi.Pointer<wire_uint_8_list> remote_device_id;

  external ffi.Pointer<wire_uint_8_list> password;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
