// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors

import 'dart:convert';
import 'dart:typed_data';

import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

abstract class MirrorXCore {
  Future<void> init(
      {required String osName,
      required String osVersion,
      required String configDir,
      dynamic hint});

  Future<String?> configReadDeviceId({dynamic hint});

  Future<void> configSaveDeviceId({required String deviceId, dynamic hint});

  Future<int?> configReadDeviceIdExpiration({dynamic hint});

  Future<void> configSaveDeviceIdExpiration(
      {required int timeStamp, dynamic hint});

  Future<String?> configReadDevicePassword({dynamic hint});

  Future<void> configSaveDevicePassword(
      {required String devicePassword, dynamic hint});

  Future<void> desktopConnect({required String remoteDeviceId, dynamic hint});

  Future<bool> desktopKeyExchangeAndPasswordVerify(
      {required String remoteDeviceId, required String password, dynamic hint});

  Future<StartMediaTransmissionReply> desktopStartMediaTransmission(
      {required String remoteDeviceId,
      required int textureId,
      required int videoTexturePtr,
      required int updateFrameCallbackPtr,
      dynamic hint});

  Future<String> utilityGenerateDevicePassword({dynamic hint});
}

class StartMediaTransmissionReply {
  final String osName;
  final String osVersion;
  final String videoType;
  final String audioType;

  StartMediaTransmissionReply({
    required this.osName,
    required this.osVersion,
    required this.videoType,
    required this.audioType,
  });
}

class MirrorXCoreImpl extends FlutterRustBridgeBase<MirrorXCoreWire>
    implements MirrorXCore {
  factory MirrorXCoreImpl(ffi.DynamicLibrary dylib) =>
      MirrorXCoreImpl.raw(MirrorXCoreWire(dylib));

  MirrorXCoreImpl.raw(MirrorXCoreWire inner) : super(inner);

  Future<void> init(
          {required String osName,
          required String osVersion,
          required String configDir,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_init(port_, _api2wire_String(osName),
            _api2wire_String(osVersion), _api2wire_String(configDir)),
        parseSuccessData: _wire2api_unit,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "init",
          argNames: ["osName", "osVersion", "configDir"],
        ),
        argValues: [osName, osVersion, configDir],
        hint: hint,
      ));

  Future<String?> configReadDeviceId({dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_config_read_device_id(port_),
        parseSuccessData: _wire2api_opt_String,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "config_read_device_id",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  Future<void> configSaveDeviceId({required String deviceId, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_config_save_device_id(port_, _api2wire_String(deviceId)),
        parseSuccessData: _wire2api_unit,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "config_save_device_id",
          argNames: ["deviceId"],
        ),
        argValues: [deviceId],
        hint: hint,
      ));

  Future<int?> configReadDeviceIdExpiration({dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_config_read_device_id_expiration(port_),
        parseSuccessData: _wire2api_opt_box_autoadd_u32,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "config_read_device_id_expiration",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  Future<void> configSaveDeviceIdExpiration(
          {required int timeStamp, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_config_save_device_id_expiration(
            port_, _api2wire_u32(timeStamp)),
        parseSuccessData: _wire2api_unit,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "config_save_device_id_expiration",
          argNames: ["timeStamp"],
        ),
        argValues: [timeStamp],
        hint: hint,
      ));

  Future<String?> configReadDevicePassword({dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_config_read_device_password(port_),
        parseSuccessData: _wire2api_opt_String,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "config_read_device_password",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  Future<void> configSaveDevicePassword(
          {required String devicePassword, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_config_save_device_password(
            port_, _api2wire_String(devicePassword)),
        parseSuccessData: _wire2api_unit,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "config_save_device_password",
          argNames: ["devicePassword"],
        ),
        argValues: [devicePassword],
        hint: hint,
      ));

  Future<void> desktopConnect({required String remoteDeviceId, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_desktop_connect(port_, _api2wire_String(remoteDeviceId)),
        parseSuccessData: _wire2api_unit,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "desktop_connect",
          argNames: ["remoteDeviceId"],
        ),
        argValues: [remoteDeviceId],
        hint: hint,
      ));

  Future<bool> desktopKeyExchangeAndPasswordVerify(
          {required String remoteDeviceId,
          required String password,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_desktop_key_exchange_and_password_verify(
            port_,
            _api2wire_String(remoteDeviceId),
            _api2wire_String(password)),
        parseSuccessData: _wire2api_bool,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "desktop_key_exchange_and_password_verify",
          argNames: ["remoteDeviceId", "password"],
        ),
        argValues: [remoteDeviceId, password],
        hint: hint,
      ));

  Future<StartMediaTransmissionReply> desktopStartMediaTransmission(
          {required String remoteDeviceId,
          required int textureId,
          required int videoTexturePtr,
          required int updateFrameCallbackPtr,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_desktop_start_media_transmission(
            port_,
            _api2wire_String(remoteDeviceId),
            _api2wire_i64(textureId),
            _api2wire_i64(videoTexturePtr),
            _api2wire_i64(updateFrameCallbackPtr)),
        parseSuccessData: _wire2api_start_media_transmission_reply,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "desktop_start_media_transmission",
          argNames: [
            "remoteDeviceId",
            "textureId",
            "videoTexturePtr",
            "updateFrameCallbackPtr"
          ],
        ),
        argValues: [
          remoteDeviceId,
          textureId,
          videoTexturePtr,
          updateFrameCallbackPtr
        ],
        hint: hint,
      ));

  Future<String> utilityGenerateDevicePassword({dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_utility_generate_device_password(port_),
        parseSuccessData: _wire2api_String,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "utility_generate_device_password",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  // Section: api2wire
  ffi.Pointer<wire_uint_8_list> _api2wire_String(String raw) {
    return _api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  int _api2wire_i64(int raw) {
    return raw;
  }

  int _api2wire_u32(int raw) {
    return raw;
  }

  int _api2wire_u8(int raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  // Section: api_fill_to_wire

}

// Section: wire2api
String _wire2api_String(dynamic raw) {
  return raw as String;
}

bool _wire2api_bool(dynamic raw) {
  return raw as bool;
}

int _wire2api_box_autoadd_u32(dynamic raw) {
  return raw as int;
}

String? _wire2api_opt_String(dynamic raw) {
  return raw == null ? null : _wire2api_String(raw);
}

int? _wire2api_opt_box_autoadd_u32(dynamic raw) {
  return raw == null ? null : _wire2api_box_autoadd_u32(raw);
}

StartMediaTransmissionReply _wire2api_start_media_transmission_reply(
    dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 4)
    throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
  return StartMediaTransmissionReply(
    osName: _wire2api_String(arr[0]),
    osVersion: _wire2api_String(arr[1]),
    videoType: _wire2api_String(arr[2]),
    audioType: _wire2api_String(arr[3]),
  );
}

int _wire2api_u32(dynamic raw) {
  return raw as int;
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

void _wire2api_unit(dynamic raw) {
  return;
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class MirrorXCoreWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MirrorXCoreWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MirrorXCoreWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void wire_init(
    int port_,
    ffi.Pointer<wire_uint_8_list> os_name,
    ffi.Pointer<wire_uint_8_list> os_version,
    ffi.Pointer<wire_uint_8_list> config_dir,
  ) {
    return _wire_init(
      port_,
      os_name,
      os_version,
      config_dir,
    );
  }

  late final _wire_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_init');
  late final _wire_init = _wire_initPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_config_read_device_id(
    int port_,
  ) {
    return _wire_config_read_device_id(
      port_,
    );
  }

  late final _wire_config_read_device_idPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_config_read_device_id');
  late final _wire_config_read_device_id =
      _wire_config_read_device_idPtr.asFunction<void Function(int)>();

  void wire_config_save_device_id(
    int port_,
    ffi.Pointer<wire_uint_8_list> device_id,
  ) {
    return _wire_config_save_device_id(
      port_,
      device_id,
    );
  }

  late final _wire_config_save_device_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_config_save_device_id');
  late final _wire_config_save_device_id = _wire_config_save_device_idPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_config_read_device_id_expiration(
    int port_,
  ) {
    return _wire_config_read_device_id_expiration(
      port_,
    );
  }

  late final _wire_config_read_device_id_expirationPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_config_read_device_id_expiration');
  late final _wire_config_read_device_id_expiration =
      _wire_config_read_device_id_expirationPtr
          .asFunction<void Function(int)>();

  void wire_config_save_device_id_expiration(
    int port_,
    int time_stamp,
  ) {
    return _wire_config_save_device_id_expiration(
      port_,
      time_stamp,
    );
  }

  late final _wire_config_save_device_id_expirationPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint32)>>(
          'wire_config_save_device_id_expiration');
  late final _wire_config_save_device_id_expiration =
      _wire_config_save_device_id_expirationPtr
          .asFunction<void Function(int, int)>();

  void wire_config_read_device_password(
    int port_,
  ) {
    return _wire_config_read_device_password(
      port_,
    );
  }

  late final _wire_config_read_device_passwordPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_config_read_device_password');
  late final _wire_config_read_device_password =
      _wire_config_read_device_passwordPtr.asFunction<void Function(int)>();

  void wire_config_save_device_password(
    int port_,
    ffi.Pointer<wire_uint_8_list> device_password,
  ) {
    return _wire_config_save_device_password(
      port_,
      device_password,
    );
  }

  late final _wire_config_save_device_passwordPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_config_save_device_password');
  late final _wire_config_save_device_password =
      _wire_config_save_device_passwordPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_desktop_connect(
    int port_,
    ffi.Pointer<wire_uint_8_list> remote_device_id,
  ) {
    return _wire_desktop_connect(
      port_,
      remote_device_id,
    );
  }

  late final _wire_desktop_connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_desktop_connect');
  late final _wire_desktop_connect = _wire_desktop_connectPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_desktop_key_exchange_and_password_verify(
    int port_,
    ffi.Pointer<wire_uint_8_list> remote_device_id,
    ffi.Pointer<wire_uint_8_list> password,
  ) {
    return _wire_desktop_key_exchange_and_password_verify(
      port_,
      remote_device_id,
      password,
    );
  }

  late final _wire_desktop_key_exchange_and_password_verifyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_desktop_key_exchange_and_password_verify');
  late final _wire_desktop_key_exchange_and_password_verify =
      _wire_desktop_key_exchange_and_password_verifyPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_desktop_start_media_transmission(
    int port_,
    ffi.Pointer<wire_uint_8_list> remote_device_id,
    int texture_id,
    int video_texture_ptr,
    int update_frame_callback_ptr,
  ) {
    return _wire_desktop_start_media_transmission(
      port_,
      remote_device_id,
      texture_id,
      video_texture_ptr,
      update_frame_callback_ptr,
    );
  }

  late final _wire_desktop_start_media_transmissionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Int64,
              ffi.Int64, ffi.Int64)>>('wire_desktop_start_media_transmission');
  late final _wire_desktop_start_media_transmission =
      _wire_desktop_start_media_transmissionPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>, int, int, int)>();

  void wire_utility_generate_device_password(
    int port_,
  ) {
    return _wire_utility_generate_device_password(
      port_,
    );
  }

  late final _wire_utility_generate_device_passwordPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_utility_generate_device_password');
  late final _wire_utility_generate_device_password =
      _wire_utility_generate_device_passwordPtr
          .asFunction<void Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list(
    int len,
  ) {
    return _new_uint_8_list(
      len,
    );
  }

  late final _new_uint_8_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list');
  late final _new_uint_8_list = _new_uint_8_listPtr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  int avcodec_receive_packet(
    ffi.Pointer<AVCodecContext> avctx,
    ffi.Pointer<AVPacket> avpkt,
  ) {
    return _avcodec_receive_packet(
      avctx,
      avpkt,
    );
  }

  late final _avcodec_receive_packetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AVCodecContext>,
              ffi.Pointer<AVPacket>)>>('avcodec_receive_packet');
  late final _avcodec_receive_packet = _avcodec_receive_packetPtr.asFunction<
      int Function(ffi.Pointer<AVCodecContext>, ffi.Pointer<AVPacket>)>();

  int avcodec_send_frame(
    ffi.Pointer<AVCodecContext> avctx,
    ffi.Pointer<AVFrame> frame,
  ) {
    return _avcodec_send_frame(
      avctx,
      frame,
    );
  }

  late final _avcodec_send_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AVCodecContext>,
              ffi.Pointer<AVFrame>)>>('avcodec_send_frame');
  late final _avcodec_send_frame = _avcodec_send_framePtr.asFunction<
      int Function(ffi.Pointer<AVCodecContext>, ffi.Pointer<AVFrame>)>();

  int avcodec_send_packet(
    ffi.Pointer<AVCodecContext> avctx,
    ffi.Pointer<AVPacket> avpkt,
  ) {
    return _avcodec_send_packet(
      avctx,
      avpkt,
    );
  }

  late final _avcodec_send_packetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AVCodecContext>,
              ffi.Pointer<AVPacket>)>>('avcodec_send_packet');
  late final _avcodec_send_packet = _avcodec_send_packetPtr.asFunction<
      int Function(ffi.Pointer<AVCodecContext>, ffi.Pointer<AVPacket>)>();

  int avcodec_receive_frame(
    ffi.Pointer<AVCodecContext> avctx,
    ffi.Pointer<AVFrame> frame,
  ) {
    return _avcodec_receive_frame(
      avctx,
      frame,
    );
  }

  late final _avcodec_receive_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AVCodecContext>,
              ffi.Pointer<AVFrame>)>>('avcodec_receive_frame');
  late final _avcodec_receive_frame = _avcodec_receive_framePtr.asFunction<
      int Function(ffi.Pointer<AVCodecContext>, ffi.Pointer<AVFrame>)>();

  int av_parser_parse2(
    ffi.Pointer<AVCodecParserContext> s,
    ffi.Pointer<AVCodecContext> avctx,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> poutbuf,
    ffi.Pointer<ffi.Int32> poutbuf_size,
    ffi.Pointer<ffi.Uint8> buf,
    int buf_size,
    int pts,
    int dts,
    int pos,
  ) {
    return _av_parser_parse2(
      s,
      avctx,
      poutbuf,
      poutbuf_size,
      buf,
      buf_size,
      pts,
      dts,
      pos,
    );
  }

  late final _av_parser_parse2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<AVCodecParserContext>,
              ffi.Pointer<AVCodecContext>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int32,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64)>>('av_parser_parse2');
  late final _av_parser_parse2 = _av_parser_parse2Ptr.asFunction<
      int Function(
          ffi.Pointer<AVCodecParserContext>,
          ffi.Pointer<AVCodecContext>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
          int)>();

  void av_parser_close(
    ffi.Pointer<AVCodecParserContext> s,
  ) {
    return _av_parser_close(
      s,
    );
  }

  late final _av_parser_closePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<AVCodecParserContext>)>>('av_parser_close');
  late final _av_parser_close = _av_parser_closePtr
      .asFunction<void Function(ffi.Pointer<AVCodecParserContext>)>();

  ffi.Pointer<AVCodecContext> avcodec_alloc_context3(
    ffi.Pointer<AVCodec> codec,
  ) {
    return _avcodec_alloc_context3(
      codec,
    );
  }

  late final _avcodec_alloc_context3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<AVCodecContext> Function(
              ffi.Pointer<AVCodec>)>>('avcodec_alloc_context3');
  late final _avcodec_alloc_context3 = _avcodec_alloc_context3Ptr
      .asFunction<ffi.Pointer<AVCodecContext> Function(ffi.Pointer<AVCodec>)>();

  int avcodec_open2(
    ffi.Pointer<AVCodecContext> avctx,
    ffi.Pointer<AVCodec> codec,
    ffi.Pointer<ffi.Void> options,
  ) {
    return _avcodec_open2(
      avctx,
      codec,
      options,
    );
  }

  late final _avcodec_open2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AVCodecContext>, ffi.Pointer<AVCodec>,
              ffi.Pointer<ffi.Void>)>>('avcodec_open2');
  late final _avcodec_open2 = _avcodec_open2Ptr.asFunction<
      int Function(ffi.Pointer<AVCodecContext>, ffi.Pointer<AVCodec>,
          ffi.Pointer<ffi.Void>)>();

  void avcodec_free_context(
    ffi.Pointer<ffi.Pointer<AVCodecContext>> avctx,
  ) {
    return _avcodec_free_context(
      avctx,
    );
  }

  late final _avcodec_free_contextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Pointer<AVCodecContext>>)>>(
      'avcodec_free_context');
  late final _avcodec_free_context = _avcodec_free_contextPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<AVCodecContext>>)>();

  ffi.Pointer<AVCodecParserContext> av_parser_init(
    int codec_id,
  ) {
    return _av_parser_init(
      codec_id,
    );
  }

  late final _av_parser_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<AVCodecParserContext> Function(
              ffi.Uint32)>>('av_parser_init');
  late final _av_parser_init = _av_parser_initPtr
      .asFunction<ffi.Pointer<AVCodecParserContext> Function(int)>();

  ffi.Pointer<AVCodec> avcodec_find_encoder_by_name(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _avcodec_find_encoder_by_name(
      name,
    );
  }

  late final _avcodec_find_encoder_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<AVCodec> Function(
              ffi.Pointer<ffi.Int8>)>>('avcodec_find_encoder_by_name');
  late final _avcodec_find_encoder_by_name = _avcodec_find_encoder_by_namePtr
      .asFunction<ffi.Pointer<AVCodec> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<AVCodec> avcodec_find_decoder_by_name(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _avcodec_find_decoder_by_name(
      name,
    );
  }

  late final _avcodec_find_decoder_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<AVCodec> Function(
              ffi.Pointer<ffi.Int8>)>>('avcodec_find_decoder_by_name');
  late final _avcodec_find_decoder_by_name = _avcodec_find_decoder_by_namePtr
      .asFunction<ffi.Pointer<AVCodec> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<AVCodecHWConfig> avcodec_get_hw_config(
    ffi.Pointer<AVCodec> codec,
    int index,
  ) {
    return _avcodec_get_hw_config(
      codec,
      index,
    );
  }

  late final _avcodec_get_hw_configPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<AVCodecHWConfig> Function(
              ffi.Pointer<AVCodec>, ffi.Int32)>>('avcodec_get_hw_config');
  late final _avcodec_get_hw_config = _avcodec_get_hw_configPtr.asFunction<
      ffi.Pointer<AVCodecHWConfig> Function(ffi.Pointer<AVCodec>, int)>();

  void av_packet_free(
    ffi.Pointer<ffi.Pointer<AVPacket>> pkt,
  ) {
    return _av_packet_free(
      pkt,
    );
  }

  late final _av_packet_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<AVPacket>>)>>('av_packet_free');
  late final _av_packet_free = _av_packet_freePtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<AVPacket>>)>();

  ffi.Pointer<AVPacket> av_packet_alloc() {
    return _av_packet_alloc();
  }

  late final _av_packet_allocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AVPacket> Function()>>(
          'av_packet_alloc');
  late final _av_packet_alloc =
      _av_packet_allocPtr.asFunction<ffi.Pointer<AVPacket> Function()>();

  int av_new_packet(
    ffi.Pointer<AVPacket> pkt,
    int size,
  ) {
    return _av_new_packet(
      pkt,
      size,
    );
  }

  late final _av_new_packetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<AVPacket>, ffi.Int32)>>('av_new_packet');
  late final _av_new_packet =
      _av_new_packetPtr.asFunction<int Function(ffi.Pointer<AVPacket>, int)>();

  void av_packet_unref(
    ffi.Pointer<AVPacket> pkt,
  ) {
    return _av_packet_unref(
      pkt,
    );
  }

  late final _av_packet_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<AVPacket>)>>(
          'av_packet_unref');
  late final _av_packet_unref =
      _av_packet_unrefPtr.asFunction<void Function(ffi.Pointer<AVPacket>)>();

  ffi.Pointer<AVBufferRef> av_buffer_ref(
    ffi.Pointer<AVBufferRef> buf,
  ) {
    return _av_buffer_ref(
      buf,
    );
  }

  late final _av_buffer_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<AVBufferRef> Function(
              ffi.Pointer<AVBufferRef>)>>('av_buffer_ref');
  late final _av_buffer_ref = _av_buffer_refPtr.asFunction<
      ffi.Pointer<AVBufferRef> Function(ffi.Pointer<AVBufferRef>)>();

  void av_frame_free(
    ffi.Pointer<ffi.Pointer<AVFrame>> frame,
  ) {
    return _av_frame_free(
      frame,
    );
  }

  late final _av_frame_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<AVFrame>>)>>('av_frame_free');
  late final _av_frame_free = _av_frame_freePtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<AVFrame>>)>();

  ffi.Pointer<AVFrame> av_frame_alloc() {
    return _av_frame_alloc();
  }

  late final _av_frame_allocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AVFrame> Function()>>(
          'av_frame_alloc');
  late final _av_frame_alloc =
      _av_frame_allocPtr.asFunction<ffi.Pointer<AVFrame> Function()>();

  int av_frame_get_buffer(
    ffi.Pointer<AVFrame> frame,
    int align,
  ) {
    return _av_frame_get_buffer(
      frame,
      align,
    );
  }

  late final _av_frame_get_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<AVFrame>, ffi.Int32)>>('av_frame_get_buffer');
  late final _av_frame_get_buffer = _av_frame_get_bufferPtr
      .asFunction<int Function(ffi.Pointer<AVFrame>, int)>();

  int av_frame_make_writable(
    ffi.Pointer<AVFrame> frame,
  ) {
    return _av_frame_make_writable(
      frame,
    );
  }

  late final _av_frame_make_writablePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<AVFrame>)>>(
          'av_frame_make_writable');
  late final _av_frame_make_writable = _av_frame_make_writablePtr
      .asFunction<int Function(ffi.Pointer<AVFrame>)>();

  int av_hwframe_transfer_data(
    ffi.Pointer<AVFrame> dst,
    ffi.Pointer<AVFrame> src,
    int flags,
  ) {
    return _av_hwframe_transfer_data(
      dst,
      src,
      flags,
    );
  }

  late final _av_hwframe_transfer_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AVFrame>, ffi.Pointer<AVFrame>,
              ffi.Int32)>>('av_hwframe_transfer_data');
  late final _av_hwframe_transfer_data =
      _av_hwframe_transfer_dataPtr.asFunction<
          int Function(ffi.Pointer<AVFrame>, ffi.Pointer<AVFrame>, int)>();

  int av_hwdevice_iterate_types(
    int prev,
  ) {
    return _av_hwdevice_iterate_types(
      prev,
    );
  }

  late final _av_hwdevice_iterate_typesPtr =
      _lookup<ffi.NativeFunction<AVHWDeviceType Function(AVHWDeviceType)>>(
          'av_hwdevice_iterate_types');
  late final _av_hwdevice_iterate_types =
      _av_hwdevice_iterate_typesPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Int8> av_hwdevice_get_type_name(
    int type_,
  ) {
    return _av_hwdevice_get_type_name(
      type_,
    );
  }

  late final _av_hwdevice_get_type_namePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(AVHWDeviceType)>>(
      'av_hwdevice_get_type_name');
  late final _av_hwdevice_get_type_name = _av_hwdevice_get_type_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  int av_hwdevice_ctx_create(
    ffi.Pointer<ffi.Pointer<AVBufferRef>> device_ctx,
    int type_,
    ffi.Pointer<ffi.Int8> device,
    ffi.Pointer<ffi.Void> opts,
    int flags,
  ) {
    return _av_hwdevice_ctx_create(
      device_ctx,
      type_,
      device,
      opts,
      flags,
    );
  }

  late final _av_hwdevice_ctx_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Pointer<AVBufferRef>>,
              AVHWDeviceType,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('av_hwdevice_ctx_create');
  late final _av_hwdevice_ctx_create = _av_hwdevice_ctx_createPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<AVBufferRef>>, int,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Void>, int)>();

  int av_image_get_buffer_size(
    int pix_fmt,
    int width,
    int height,
    int align,
  ) {
    return _av_image_get_buffer_size(
      pix_fmt,
      width,
      height,
      align,
    );
  }

  late final _av_image_get_buffer_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(AVPixelFormat, ffi.Int32, ffi.Int32,
              ffi.Int32)>>('av_image_get_buffer_size');
  late final _av_image_get_buffer_size = _av_image_get_buffer_sizePtr
      .asFunction<int Function(int, int, int, int)>();

  void av_log_set_level(
    int level,
  ) {
    return _av_log_set_level(
      level,
    );
  }

  late final _av_log_set_levelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>(
          'av_log_set_level');
  late final _av_log_set_level =
      _av_log_set_levelPtr.asFunction<void Function(int)>();

  int av_log_get_level() {
    return _av_log_get_level();
  }

  late final _av_log_get_levelPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('av_log_get_level');
  late final _av_log_get_level =
      _av_log_get_levelPtr.asFunction<int Function()>();

  void av_log_set_flags(
    int arg,
  ) {
    return _av_log_set_flags(
      arg,
    );
  }

  late final _av_log_set_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>(
          'av_log_set_flags');
  late final _av_log_set_flags =
      _av_log_set_flagsPtr.asFunction<void Function(int)>();

  int av_log_get_flags() {
    return _av_log_get_flags();
  }

  late final _av_log_get_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('av_log_get_flags');
  late final _av_log_get_flags =
      _av_log_get_flagsPtr.asFunction<int Function()>();

  int av_opt_set(
    ffi.Pointer<ffi.Void> obj,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> val,
    int search_flags,
  ) {
    return _av_opt_set(
      obj,
      name,
      val,
      search_flags,
    );
  }

  late final _av_opt_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('av_opt_set');
  late final _av_opt_set = _av_opt_setPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>, int)>();

  CMTime CMTimeMake(
    int value,
    int time_scale,
  ) {
    return _CMTimeMake(
      value,
      time_scale,
    );
  }

  late final _CMTimeMakePtr =
      _lookup<ffi.NativeFunction<CMTime Function(ffi.Int64, ffi.Int32)>>(
          'CMTimeMake');
  late final _CMTimeMake =
      _CMTimeMakePtr.asFunction<CMTime Function(int, int)>();

  bool CMSampleBufferIsValid(
    CMSampleBufferRef sample_buffer,
  ) {
    return _CMSampleBufferIsValid(
          sample_buffer,
        ) !=
        0;
  }

  late final _CMSampleBufferIsValidPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(CMSampleBufferRef)>>(
          'CMSampleBufferIsValid');
  late final _CMSampleBufferIsValid =
      _CMSampleBufferIsValidPtr.asFunction<int Function(CMSampleBufferRef)>();

  int CMSampleBufferGetSampleTimingInfo(
    CMSampleBufferRef sample_buffer,
    int sampleIndex,
    ffi.Pointer<CMSampleTimingInfo> timing_info_out,
  ) {
    return _CMSampleBufferGetSampleTimingInfo(
      sample_buffer,
      sampleIndex,
      timing_info_out,
    );
  }

  late final _CMSampleBufferGetSampleTimingInfoPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(CMSampleBufferRef, ffi.Int32,
                  ffi.Pointer<CMSampleTimingInfo>)>>(
      'CMSampleBufferGetSampleTimingInfo');
  late final _CMSampleBufferGetSampleTimingInfo =
      _CMSampleBufferGetSampleTimingInfoPtr.asFunction<
          int Function(
              CMSampleBufferRef, int, ffi.Pointer<CMSampleTimingInfo>)>();

  CVImageBufferRef CMSampleBufferGetImageBuffer(
    CMSampleBufferRef sample_buffer,
  ) {
    return _CMSampleBufferGetImageBuffer(
      sample_buffer,
    );
  }

  late final _CMSampleBufferGetImageBufferPtr =
      _lookup<ffi.NativeFunction<CVImageBufferRef Function(CMSampleBufferRef)>>(
          'CMSampleBufferGetImageBuffer');
  late final _CMSampleBufferGetImageBuffer = _CMSampleBufferGetImageBufferPtr
      .asFunction<CVImageBufferRef Function(CMSampleBufferRef)>();

  int CVPixelBufferGetPixelFormatType(
    CVPixelBufferRef pixel_buffer,
  ) {
    return _CVPixelBufferGetPixelFormatType(
      pixel_buffer,
    );
  }

  late final _CVPixelBufferGetPixelFormatTypePtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CVPixelBufferRef)>>(
          'CVPixelBufferGetPixelFormatType');
  late final _CVPixelBufferGetPixelFormatType =
      _CVPixelBufferGetPixelFormatTypePtr.asFunction<
          int Function(CVPixelBufferRef)>();

  int CVPixelBufferLockBaseAddress(
    CVPixelBufferRef pixel_buffer,
    int lock_flags,
  ) {
    return _CVPixelBufferLockBaseAddress(
      pixel_buffer,
      lock_flags,
    );
  }

  late final _CVPixelBufferLockBaseAddressPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(CVPixelBufferRef, ffi.Uint32)>>(
      'CVPixelBufferLockBaseAddress');
  late final _CVPixelBufferLockBaseAddress = _CVPixelBufferLockBaseAddressPtr
      .asFunction<int Function(CVPixelBufferRef, int)>();

  int CVPixelBufferUnlockBaseAddress(
    CVPixelBufferRef pixel_buffer,
    int unlock_flags,
  ) {
    return _CVPixelBufferUnlockBaseAddress(
      pixel_buffer,
      unlock_flags,
    );
  }

  late final _CVPixelBufferUnlockBaseAddressPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(CVPixelBufferRef, ffi.Uint32)>>(
      'CVPixelBufferUnlockBaseAddress');
  late final _CVPixelBufferUnlockBaseAddress =
      _CVPixelBufferUnlockBaseAddressPtr.asFunction<
          int Function(CVPixelBufferRef, int)>();

  int CVPixelBufferGetWidth(
    CVPixelBufferRef pixel_buffer,
  ) {
    return _CVPixelBufferGetWidth(
      pixel_buffer,
    );
  }

  late final _CVPixelBufferGetWidthPtr =
      _lookup<ffi.NativeFunction<size_t Function(CVPixelBufferRef)>>(
          'CVPixelBufferGetWidth');
  late final _CVPixelBufferGetWidth =
      _CVPixelBufferGetWidthPtr.asFunction<int Function(CVPixelBufferRef)>();

  int CVPixelBufferGetHeight(
    CVPixelBufferRef pixel_buffer,
  ) {
    return _CVPixelBufferGetHeight(
      pixel_buffer,
    );
  }

  late final _CVPixelBufferGetHeightPtr =
      _lookup<ffi.NativeFunction<size_t Function(CVPixelBufferRef)>>(
          'CVPixelBufferGetHeight');
  late final _CVPixelBufferGetHeight =
      _CVPixelBufferGetHeightPtr.asFunction<int Function(CVPixelBufferRef)>();

  int CVPixelBufferGetBytesPerRowOfPlane(
    CVPixelBufferRef pixel_buffer,
    int planeIndex,
  ) {
    return _CVPixelBufferGetBytesPerRowOfPlane(
      pixel_buffer,
      planeIndex,
    );
  }

  late final _CVPixelBufferGetBytesPerRowOfPlanePtr =
      _lookup<ffi.NativeFunction<size_t Function(CVPixelBufferRef, size_t)>>(
          'CVPixelBufferGetBytesPerRowOfPlane');
  late final _CVPixelBufferGetBytesPerRowOfPlane =
      _CVPixelBufferGetBytesPerRowOfPlanePtr.asFunction<
          int Function(CVPixelBufferRef, int)>();

  ffi.Pointer<ffi.Void> CVPixelBufferGetBaseAddressOfPlane(
    CVPixelBufferRef pixel_buffer,
    int planeIndex,
  ) {
    return _CVPixelBufferGetBaseAddressOfPlane(
      pixel_buffer,
      planeIndex,
    );
  }

  late final _CVPixelBufferGetBaseAddressOfPlanePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CVPixelBufferRef, size_t)>>('CVPixelBufferGetBaseAddressOfPlane');
  late final _CVPixelBufferGetBaseAddressOfPlane =
      _CVPixelBufferGetBaseAddressOfPlanePtr.asFunction<
          ffi.Pointer<ffi.Void> Function(CVPixelBufferRef, int)>();

  int CVPixelBufferGetHeightOfPlane(
    CVPixelBufferRef pixel_buffer,
    int planeIndex,
  ) {
    return _CVPixelBufferGetHeightOfPlane(
      pixel_buffer,
      planeIndex,
    );
  }

  late final _CVPixelBufferGetHeightOfPlanePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              CVPixelBufferRef, ffi.Uint32)>>('CVPixelBufferGetHeightOfPlane');
  late final _CVPixelBufferGetHeightOfPlane = _CVPixelBufferGetHeightOfPlanePtr
      .asFunction<int Function(CVPixelBufferRef, int)>();

  CVPixelBufferRef CVPixelBufferRetain(
    CVPixelBufferRef texture,
  ) {
    return _CVPixelBufferRetain(
      texture,
    );
  }

  late final _CVPixelBufferRetainPtr =
      _lookup<ffi.NativeFunction<CVPixelBufferRef Function(CVPixelBufferRef)>>(
          'CVPixelBufferRetain');
  late final _CVPixelBufferRetain = _CVPixelBufferRetainPtr.asFunction<
      CVPixelBufferRef Function(CVPixelBufferRef)>();

  int CVBufferGetAttachment(
    ffi.Pointer<ffi.Void> buffer,
    int key,
    ffi.Pointer<ffi.Void> attachmentMode,
  ) {
    return _CVBufferGetAttachment(
      buffer,
      key,
      attachmentMode,
    );
  }

  late final _CVBufferGetAttachmentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Int32,
              ffi.Pointer<ffi.Void>)>>('CVBufferGetAttachment');
  late final _CVBufferGetAttachment = _CVBufferGetAttachmentPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  int NV12ToARGBMatrix(
    ffi.Pointer<ffi.Uint8> src_y,
    int src_stride_y,
    ffi.Pointer<ffi.Uint8> src_uv,
    int src_stride_uv,
    ffi.Pointer<ffi.Uint8> dst_argb,
    int dst_stride_argb,
    ffi.Pointer<ffi.Void> yuvconstants,
    int width,
    int height,
  ) {
    return _NV12ToARGBMatrix(
      src_y,
      src_stride_y,
      src_uv,
      src_stride_uv,
      dst_argb,
      dst_stride_argb,
      yuvconstants,
      width,
      height,
    );
  }

  late final _NV12ToARGBMatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.IntPtr,
              ffi.Pointer<ffi.Uint8>,
              ffi.IntPtr,
              ffi.Pointer<ffi.Uint8>,
              ffi.IntPtr,
              ffi.Pointer<ffi.Void>,
              ffi.IntPtr,
              ffi.IntPtr)>>('NV12ToARGBMatrix');
  late final _NV12ToARGBMatrix = _NV12ToARGBMatrixPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Void>, int, int)>();
}

class AVBuffer extends ffi.Opaque {}

class AVCodecDefault extends ffi.Opaque {}

class AVCodecInternal extends ffi.Opaque {}

class AVDictionary extends ffi.Opaque {}

class MpegEncContext extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class AVRational extends ffi.Struct {
  @ffi.Int32()
  external int num;

  @ffi.Int32()
  external int den;
}

class AVOptionDefaultVal extends ffi.Union {
  @ffi.Int64()
  external int i64_;

  @ffi.Double()
  external double dbl;

  external ffi.Pointer<ffi.Int8> str_;

  external AVRational q;
}

class AVOption extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.Int8> help;

  @ffi.Int32()
  external int offset;

  @AVOptionType()
  external int type_;

  external AVOptionDefaultVal default_val;

  @ffi.Double()
  external double min;

  @ffi.Double()
  external double max;

  @ffi.Int32()
  external int flags;

  external ffi.Pointer<ffi.Int8> unit;
}

typedef AVOptionType = ffi.Uint32;

class AVOptionRange extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> str_;

  @ffi.Double()
  external double value_min;

  @ffi.Double()
  external double value_max;

  @ffi.Double()
  external double component_min;

  @ffi.Double()
  external double component_max;

  @ffi.Int32()
  external int is_range;
}

class AVOptionRanges extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<AVOptionRange>> range;

  @ffi.Int32()
  external int nb_ranges;

  @ffi.Int32()
  external int nb_components;
}

class AVClass extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> class_name;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Void>)>> item_name;

  external ffi.Pointer<AVOption> option;

  @ffi.Int32()
  external int version;

  @ffi.Int32()
  external int log_level_offset_offset;

  @ffi.Int32()
  external int parent_log_context_offset;

  @AVClassCategory()
  external int category;

  external ffi.Pointer<
          ffi.NativeFunction<AVClassCategory Function(ffi.Pointer<ffi.Void>)>>
      get_category;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Pointer<AVOptionRanges>>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32)>> query_ranges;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>> child_next;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<AVClass> Function(
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>> child_class_iterate;
}

typedef AVClassCategory = ffi.Uint32;

class AVBufferRef extends ffi.Struct {
  external ffi.Pointer<AVBuffer> buffer;

  external ffi.Pointer<ffi.Uint8> data;

  @uintptr_t()
  external int size;
}

typedef uintptr_t = ffi.Uint64;

class AVFrameSideData extends ffi.Struct {
  @AVFrameSideDataType()
  external int typ;

  external ffi.Pointer<ffi.Uint8> data;

  @uintptr_t()
  external int size;

  external ffi.Pointer<AVDictionary> metadata;

  external ffi.Pointer<AVBufferRef> buf;
}

typedef AVFrameSideDataType = ffi.Uint32;

class AVFrame extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Pointer<ffi.Uint8>> data;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int32> linesize;

  external ffi.Pointer<ffi.Pointer<ffi.Uint8>> extended_data;

  @ffi.Int32()
  external int width;

  @ffi.Int32()
  external int height;

  @ffi.Int32()
  external int nb_samples;

  @AVPixelFormat()
  external int format;

  @ffi.Int32()
  external int key_frame;

  @AVPictureType()
  external int pict_type;

  external AVRational sample_aspect_ratio;

  @ffi.Int64()
  external int pts;

  @ffi.Int64()
  external int pkt_pts;

  external AVRational time_base;

  @ffi.Int32()
  external int coded_picture_number;

  @ffi.Int32()
  external int display_picture_number;

  @ffi.Int32()
  external int quality;

  external ffi.Pointer<ffi.Void> opaque;

  @ffi.Int32()
  external int repeat_pict;

  @ffi.Int32()
  external int interlaced_frame;

  @ffi.Int32()
  external int top_field_first;

  @ffi.Int32()
  external int palette_has_changed;

  @ffi.Int64()
  external int reordered_opaque;

  @ffi.Int32()
  external int sample_rate;

  @ffi.Uint64()
  external int channel_layout;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Pointer<AVBufferRef>> buf;

  external ffi.Pointer<ffi.Pointer<AVBufferRef>> extended_buf;

  @ffi.Int32()
  external int nb_extended_buf;

  external ffi.Pointer<ffi.Pointer<AVFrameSideData>> side_data;

  @ffi.Int32()
  external int nb_side_data;

  @ffi.Int32()
  external int flags;

  @AVColorRange()
  external int color_range;

  @AVColorPrimaries()
  external int color_primaries;

  @AVColorTransferCharacteristic()
  external int color_trc;

  @AVColorSpace()
  external int color_space;

  @AVChromaLocation()
  external int chroma_location;

  @ffi.Int64()
  external int best_effort_timestamp;

  @ffi.Int64()
  external int pkt_pos;

  @ffi.Int64()
  external int pkt_duration;

  external ffi.Pointer<AVDictionary> metadata;

  @ffi.Int32()
  external int decode_error_flags;

  @ffi.Int32()
  external int channels;

  @ffi.Int32()
  external int pkt_size;

  external ffi.Pointer<AVBufferRef> hw_frames_ctx;

  external ffi.Pointer<AVBufferRef> opaque_ref;

  @uintptr_t()
  external int crop_top;

  @uintptr_t()
  external int crop_bottom;

  @uintptr_t()
  external int crop_left;

  @uintptr_t()
  external int crop_right;

  external ffi.Pointer<AVBufferRef> private_ref;
}

typedef AVPixelFormat = ffi.Int32;
typedef AVPictureType = ffi.Uint32;
typedef AVColorRange = ffi.Uint32;
typedef AVColorPrimaries = ffi.Uint32;
typedef AVColorTransferCharacteristic = ffi.Uint32;
typedef AVColorSpace = ffi.Uint32;
typedef AVChromaLocation = ffi.Uint32;

class RcOverride extends ffi.Struct {
  @ffi.Int32()
  external int start_frame;

  @ffi.Int32()
  external int end_frame;

  @ffi.Int32()
  external int qscale;

  @ffi.Float()
  external double quality_factor;
}

class AVHWAccel extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  @AVMediaType()
  external int type_;

  @AVCodecID()
  external int id;

  @AVPixelFormat()
  external int pix_fmt;

  @ffi.Int32()
  external int capabilities;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<AVCodecContext>, ffi.Pointer<AVFrame>)>> alloc_frame;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AVCodecContext>,
              ffi.Pointer<ffi.Uint8>, ffi.Uint32)>> start_frame;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AVCodecContext>, ffi.Int32,
              ffi.Pointer<ffi.Uint8>, ffi.Uint32)>> decode_params;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AVCodecContext>,
              ffi.Pointer<ffi.Uint8>, ffi.Uint32)>> decode_slice;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<AVCodecContext>)>>
      end_frame;

  @ffi.Int32()
  external int frame_priv_data_size;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<MpegEncContext>)>>
      decode_mb;

  external ffi.Pointer<
      ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<AVCodecContext>)>> init;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<AVCodecContext>)>>
      uninit;

  @ffi.Int32()
  external int priv_data_size;

  @ffi.Int32()
  external int caps_internal;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<AVCodecContext>, ffi.Pointer<AVBufferRef>)>>
      frame_params;
}

typedef AVMediaType = ffi.Int32;
typedef AVCodecID = ffi.Uint32;

class AVCodecContext extends ffi.Opaque {}

class AVProfile extends ffi.Struct {
  @ffi.Int32()
  external int profile;

  external ffi.Pointer<ffi.Int8> name;
}

class AVCodecDescriptor extends ffi.Struct {
  @AVCodecID()
  external int id;

  @AVMediaType()
  external int type_;

  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.Int8> long_name;

  @ffi.Int32()
  external int props;

  external ffi.Pointer<ffi.Pointer<ffi.Int8>> mime_types;

  external ffi.Pointer<ffi.Pointer<AVProfile>> profiles;
}

class AVPacketSideData extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> data;

  @uintptr_t()
  external int size;

  @AVPacketSideDataType()
  external int typ;
}

typedef AVPacketSideDataType = ffi.Uint32;

class AVPacket extends ffi.Struct {
  external ffi.Pointer<AVBufferRef> buf;

  @ffi.Int64()
  external int pts;

  @ffi.Int64()
  external int dts;

  external ffi.Pointer<ffi.Uint8> data;

  @ffi.Int32()
  external int size;

  @ffi.Int32()
  external int stream_index;

  @ffi.Int32()
  external int flags;

  external ffi.Pointer<AVPacketSideData> side_data;

  @ffi.Int32()
  external int side_data_elems;

  @ffi.Int64()
  external int duration;

  @ffi.Int64()
  external int pos;

  external ffi.Pointer<ffi.Void> opaque;

  external ffi.Pointer<AVBufferRef> opaque_ref;

  external AVRational time_base;
}

class AVCodecParserContext extends ffi.Struct {
  external ffi.Pointer<ffi.Void> priv_data;

  external ffi.Pointer<ffi.Void> parser;

  @ffi.Int64()
  external int frame_offset;

  @ffi.Int64()
  external int cur_offset;

  @ffi.Int64()
  external int next_frame_offset;

  @AVPixelFormat()
  external int pict_type;

  @ffi.Int32()
  external int repeat_pict;

  @ffi.Int64()
  external int pts;

  @ffi.Int64()
  external int dts;

  @ffi.Int64()
  external int last_pts;

  @ffi.Int64()
  external int last_dts;

  @ffi.Int32()
  external int fetch_timestamp;

  @ffi.Int32()
  external int cur_frame_start_index;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int64> cur_frame_offset;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int64> cur_frame_pts;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int64> cur_frame_dts;

  @ffi.Int32()
  external int flags;

  @ffi.Int64()
  external int offset;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int64> cur_frame_end;

  @ffi.Int32()
  external int key_frame;

  @ffi.Int32()
  external int dts_sync_point;

  @ffi.Int32()
  external int dts_ref_dts_delta;

  @ffi.Int32()
  external int pts_dts_delta;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int64> cur_frame_pos;

  @ffi.Int64()
  external int pos;

  @ffi.Int64()
  external int last_pos;

  @ffi.Int32()
  external int duration;

  @AVFieldOrder()
  external int field_order;

  @AVPictureStructure()
  external int picture_structure;

  @ffi.Int32()
  external int output_picture_number;

  @ffi.Int32()
  external int width;

  @ffi.Int32()
  external int height;

  @ffi.Int32()
  external int coded_width;

  @ffi.Int32()
  external int coded_height;

  @ffi.Int32()
  external int format;
}

typedef AVFieldOrder = ffi.Uint32;
typedef AVPictureStructure = ffi.Uint32;

class AVSubtitleRect extends ffi.Struct {
  @ffi.Int32()
  external int x;

  @ffi.Int32()
  external int y;

  @ffi.Int32()
  external int w;

  @ffi.Int32()
  external int h;

  @ffi.Int32()
  external int nb_colors;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<ffi.Uint8>> data;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int32> linesize;

  @AVSubtitleType()
  external int type_;

  external ffi.Pointer<ffi.Int8> text;

  external ffi.Pointer<ffi.Int8> ass;

  @ffi.Int32()
  external int flags;
}

typedef AVSubtitleType = ffi.Uint32;

class AVSubtitle extends ffi.Struct {
  @ffi.Uint16()
  external int format;

  @ffi.Uint32()
  external int start_display_time;

  @ffi.Uint32()
  external int end_display_time;

  @ffi.Uint32()
  external int num_rects;

  external ffi.Pointer<ffi.Pointer<AVSubtitleRect>> rects;

  @ffi.Int64()
  external int pts;
}

class AVCodec extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.Int8> long_name;

  @AVMediaType()
  external int type_;

  @AVCodecID()
  external int id;

  @ffi.Int32()
  external int capabilities;

  @ffi.Uint8()
  external int max_lowres;

  external ffi.Pointer<AVRational> supported_framerates;

  external ffi.Pointer<AVPixelFormat> pix_fmts;

  external ffi.Pointer<ffi.Int32> supported_samplerates;

  external ffi.Pointer<AVSampleFormat> sample_fmts;

  external ffi.Pointer<ffi.Uint64> channel_layouts;

  external ffi.Pointer<AVClass> priv_class;

  external ffi.Pointer<AVProfile> profiles;

  external ffi.Pointer<ffi.Int8> wrapper_name;

  @ffi.Int32()
  external int caps_internal;

  @ffi.Int32()
  external int priv_data_size;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<AVCodecContext>, ffi.Pointer<AVCodecContext>)>>
      update_thread_context;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<AVCodecContext>, ffi.Pointer<AVCodecContext>)>>
      update_thread_context_for_user;

  external ffi.Pointer<AVCodecDefault> defaults;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<AVCodec>)>>
      init_static_data;

  external ffi.Pointer<
      ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<AVCodecContext>)>> init;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<AVCodecContext>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int32,
              ffi.Pointer<AVSubtitle>)>> encode_sub;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AVCodecContext>, ffi.Pointer<AVPacket>,
              ffi.Pointer<AVFrame>, ffi.Pointer<ffi.Int32>)>> encode2;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AVCodecContext>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int32>, ffi.Pointer<AVPacket>)>> decode;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<AVCodecContext>)>>
      close;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<AVCodecContext>, ffi.Pointer<AVPacket>)>>
      receive_packet;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<AVCodecContext>, ffi.Pointer<AVFrame>)>>
      receive_frame;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<AVCodecContext>)>>
      flush;

  external ffi.Pointer<ffi.Int8> bsfs;

  external ffi.Pointer<ffi.Pointer<ffi.Void>> hw_configs;

  external ffi.Pointer<ffi.Uint32> codec_tags;
}

typedef AVSampleFormat = ffi.Int32;

class AVCodecHWConfig extends ffi.Struct {
  @AVPixelFormat()
  external int pix_fmt;

  @ffi.Int32()
  external int methods;

  @AVHWDeviceType()
  external int device_type;
}

typedef AVHWDeviceType = ffi.Uint32;

class CMTime extends ffi.Struct {
  @CMTimeValue()
  external int value;

  @CMTimeScale()
  external int time_scale;

  @CMTimeFlags()
  external int flags;

  @CMTimeEpoch()
  external int epoch;
}

typedef CMTimeValue = ffi.Int64;
typedef CMTimeScale = ffi.Int32;
typedef CMTimeFlags = ffi.Uint32;
typedef CMTimeEpoch = ffi.Int64;

class CMSampleTimingInfo extends ffi.Struct {
  external CMTime duration;

  external CMTime presentation_timestamp;

  external CMTime decode_timestamp;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Uint8 Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
typedef CMSampleBufferRef = ffi.Pointer<ffi.Void>;
typedef CVImageBufferRef = ffi.Pointer<ffi.Void>;
typedef CVPixelBufferRef = CVImageBufferRef;
typedef size_t = __darwin_size_t;
typedef __darwin_size_t = ffi.Uint64;

const int AV_PARSER_PTS_NB = 4;

const int AV_CODEC_FLAG2_LOCAL_HEADER = 8;

const int AV_CODEC_CAP_TRUNCATED = 8;

const int AV_NUM_DATA_POINTERS = 8;

const int AV_LOG_QUIET = -8;

const int AV_LOG_PANIC = 0;

const int AV_LOG_FATAL = 8;

const int AV_LOG_ERROR = 16;

const int AV_LOG_WARNING = 24;

const int AV_LOG_INFO = 32;

const int AV_LOG_VERBOSE = 40;

const int AV_LOG_DEBUG = 48;

const int AV_LOG_TRACE = 56;

const int AV_LOG_SKIP_REPEATED = 1;

const int AV_LOG_PRINT_LEVEL = 2;

const int AV_PICTURE_STRUCTURE_UNKNOWN = 0;

const int AV_PICTURE_STRUCTURE_TOP_FIELD = 1;

const int AV_PICTURE_STRUCTURE_BOTTOM_FIELD = 2;

const int AV_PICTURE_STRUCTURE_FRAME = 3;

const int SUBTITLE_NONE = 0;

const int SUBTITLE_BITMAP = 1;

const int SUBTITLE_TEXT = 2;

const int SUBTITLE_ASS = 3;

const int AV_CODEC_ID_NONE = 0;

const int AV_CODEC_ID_MPEG1VIDEO = 1;

const int AV_CODEC_ID_MPEG2VIDEO = 2;

const int AV_CODEC_ID_H261 = 3;

const int AV_CODEC_ID_H263 = 4;

const int AV_CODEC_ID_RV10 = 5;

const int AV_CODEC_ID_RV20 = 6;

const int AV_CODEC_ID_MJPEG = 7;

const int AV_CODEC_ID_MJPEGB = 8;

const int AV_CODEC_ID_LJPEG = 9;

const int AV_CODEC_ID_SP5X = 10;

const int AV_CODEC_ID_JPEGLS = 11;

const int AV_CODEC_ID_MPEG4 = 12;

const int AV_CODEC_ID_RAWVIDEO = 13;

const int AV_CODEC_ID_MSMPEG4V1 = 14;

const int AV_CODEC_ID_MSMPEG4V2 = 15;

const int AV_CODEC_ID_MSMPEG4V3 = 16;

const int AV_CODEC_ID_WMV1 = 17;

const int AV_CODEC_ID_WMV2 = 18;

const int AV_CODEC_ID_H263P = 19;

const int AV_CODEC_ID_H263I = 20;

const int AV_CODEC_ID_FLV1 = 21;

const int AV_CODEC_ID_SVQ1 = 22;

const int AV_CODEC_ID_SVQ3 = 23;

const int AV_CODEC_ID_DVVIDEO = 24;

const int AV_CODEC_ID_HUFFYUV = 25;

const int AV_CODEC_ID_CYUV = 26;

const int AV_CODEC_ID_H264 = 27;

const int AV_CODEC_ID_INDEO3 = 28;

const int AV_CODEC_ID_VP3 = 29;

const int AV_CODEC_ID_THEORA = 30;

const int AV_CODEC_ID_ASV1 = 31;

const int AV_CODEC_ID_ASV2 = 32;

const int AV_CODEC_ID_FFV1 = 33;

const int AV_CODEC_ID_4XM = 34;

const int AV_CODEC_ID_VCR1 = 35;

const int AV_CODEC_ID_CLJR = 36;

const int AV_CODEC_ID_MDEC = 37;

const int AV_CODEC_ID_ROQ = 38;

const int AV_CODEC_ID_INTERPLAY_VIDEO = 39;

const int AV_CODEC_ID_XAN_WC3 = 40;

const int AV_CODEC_ID_XAN_WC4 = 41;

const int AV_CODEC_ID_RPZA = 42;

const int AV_CODEC_ID_CINEPAK = 43;

const int AV_CODEC_ID_WS_VQA = 44;

const int AV_CODEC_ID_MSRLE = 45;

const int AV_CODEC_ID_MSVIDEO1 = 46;

const int AV_CODEC_ID_IDCIN = 47;

const int AV_CODEC_ID_8BPS = 48;

const int AV_CODEC_ID_SMC = 49;

const int AV_CODEC_ID_FLIC = 50;

const int AV_CODEC_ID_TRUEMOTION1 = 51;

const int AV_CODEC_ID_VMDVIDEO = 52;

const int AV_CODEC_ID_MSZH = 53;

const int AV_CODEC_ID_ZLIB = 54;

const int AV_CODEC_ID_QTRLE = 55;

const int AV_CODEC_ID_TSCC = 56;

const int AV_CODEC_ID_ULTI = 57;

const int AV_CODEC_ID_QDRAW = 58;

const int AV_CODEC_ID_VIXL = 59;

const int AV_CODEC_ID_QPEG = 60;

const int AV_CODEC_ID_PNG = 61;

const int AV_CODEC_ID_PPM = 62;

const int AV_CODEC_ID_PBM = 63;

const int AV_CODEC_ID_PGM = 64;

const int AV_CODEC_ID_PGMYUV = 65;

const int AV_CODEC_ID_PAM = 66;

const int AV_CODEC_ID_FFVHUFF = 67;

const int AV_CODEC_ID_RV30 = 68;

const int AV_CODEC_ID_RV40 = 69;

const int AV_CODEC_ID_VC1 = 70;

const int AV_CODEC_ID_WMV3 = 71;

const int AV_CODEC_ID_LOCO = 72;

const int AV_CODEC_ID_WNV1 = 73;

const int AV_CODEC_ID_AASC = 74;

const int AV_CODEC_ID_INDEO2 = 75;

const int AV_CODEC_ID_FRAPS = 76;

const int AV_CODEC_ID_TRUEMOTION2 = 77;

const int AV_CODEC_ID_BMP = 78;

const int AV_CODEC_ID_CSCD = 79;

const int AV_CODEC_ID_MMVIDEO = 80;

const int AV_CODEC_ID_ZMBV = 81;

const int AV_CODEC_ID_AVS = 82;

const int AV_CODEC_ID_SMACKVIDEO = 83;

const int AV_CODEC_ID_NUV = 84;

const int AV_CODEC_ID_KMVC = 85;

const int AV_CODEC_ID_FLASHSV = 86;

const int AV_CODEC_ID_CAVS = 87;

const int AV_CODEC_ID_JPEG2000 = 88;

const int AV_CODEC_ID_VMNC = 89;

const int AV_CODEC_ID_VP5 = 90;

const int AV_CODEC_ID_VP6 = 91;

const int AV_CODEC_ID_VP6F = 92;

const int AV_CODEC_ID_TARGA = 93;

const int AV_CODEC_ID_DSICINVIDEO = 94;

const int AV_CODEC_ID_TIERTEXSEQVIDEO = 95;

const int AV_CODEC_ID_TIFF = 96;

const int AV_CODEC_ID_GIF = 97;

const int AV_CODEC_ID_DXA = 98;

const int AV_CODEC_ID_DNXHD = 99;

const int AV_CODEC_ID_THP = 100;

const int AV_CODEC_ID_SGI = 101;

const int AV_CODEC_ID_C93 = 102;

const int AV_CODEC_ID_BETHSOFTVID = 103;

const int AV_CODEC_ID_PTX = 104;

const int AV_CODEC_ID_TXD = 105;

const int AV_CODEC_ID_VP6A = 106;

const int AV_CODEC_ID_AMV = 107;

const int AV_CODEC_ID_VB = 108;

const int AV_CODEC_ID_PCX = 109;

const int AV_CODEC_ID_SUNRAST = 110;

const int AV_CODEC_ID_INDEO4 = 111;

const int AV_CODEC_ID_INDEO5 = 112;

const int AV_CODEC_ID_MIMIC = 113;

const int AV_CODEC_ID_RL2 = 114;

const int AV_CODEC_ID_ESCAPE124 = 115;

const int AV_CODEC_ID_DIRAC = 116;

const int AV_CODEC_ID_BFI = 117;

const int AV_CODEC_ID_CMV = 118;

const int AV_CODEC_ID_MOTIONPIXELS = 119;

const int AV_CODEC_ID_TGV = 120;

const int AV_CODEC_ID_TGQ = 121;

const int AV_CODEC_ID_TQI = 122;

const int AV_CODEC_ID_AURA = 123;

const int AV_CODEC_ID_AURA2 = 124;

const int AV_CODEC_ID_V210X = 125;

const int AV_CODEC_ID_TMV = 126;

const int AV_CODEC_ID_V210 = 127;

const int AV_CODEC_ID_DPX = 128;

const int AV_CODEC_ID_MAD = 129;

const int AV_CODEC_ID_FRWU = 130;

const int AV_CODEC_ID_FLASHSV2 = 131;

const int AV_CODEC_ID_CDGRAPHICS = 132;

const int AV_CODEC_ID_R210 = 133;

const int AV_CODEC_ID_ANM = 134;

const int AV_CODEC_ID_BINKVIDEO = 135;

const int AV_CODEC_ID_IFF_ILBM = 136;

const int AV_CODEC_ID_IFF_BYTERUN1 = 136;

const int AV_CODEC_ID_KGV1 = 137;

const int AV_CODEC_ID_YOP = 138;

const int AV_CODEC_ID_VP8 = 139;

const int AV_CODEC_ID_PICTOR = 140;

const int AV_CODEC_ID_ANSI = 141;

const int AV_CODEC_ID_A64_MULTI = 142;

const int AV_CODEC_ID_A64_MULTI5 = 143;

const int AV_CODEC_ID_R10K = 144;

const int AV_CODEC_ID_MXPEG = 145;

const int AV_CODEC_ID_LAGARITH = 146;

const int AV_CODEC_ID_PRORES = 147;

const int AV_CODEC_ID_JV = 148;

const int AV_CODEC_ID_DFA = 149;

const int AV_CODEC_ID_WMV3IMAGE = 150;

const int AV_CODEC_ID_VC1IMAGE = 151;

const int AV_CODEC_ID_UTVIDEO = 152;

const int AV_CODEC_ID_BMV_VIDEO = 153;

const int AV_CODEC_ID_VBLE = 154;

const int AV_CODEC_ID_DXTORY = 155;

const int AV_CODEC_ID_V410 = 156;

const int AV_CODEC_ID_XWD = 157;

const int AV_CODEC_ID_CDXL = 158;

const int AV_CODEC_ID_XBM = 159;

const int AV_CODEC_ID_ZEROCODEC = 160;

const int AV_CODEC_ID_MSS1 = 161;

const int AV_CODEC_ID_MSA1 = 162;

const int AV_CODEC_ID_TSCC2 = 163;

const int AV_CODEC_ID_MTS2 = 164;

const int AV_CODEC_ID_CLLC = 165;

const int AV_CODEC_ID_MSS2 = 166;

const int AV_CODEC_ID_VP9 = 167;

const int AV_CODEC_ID_AIC = 168;

const int AV_CODEC_ID_ESCAPE130 = 169;

const int AV_CODEC_ID_G2M = 170;

const int AV_CODEC_ID_WEBP = 171;

const int AV_CODEC_ID_HNM4_VIDEO = 172;

const int AV_CODEC_ID_HEVC = 173;

const int AV_CODEC_ID_H265 = 173;

const int AV_CODEC_ID_FIC = 174;

const int AV_CODEC_ID_ALIAS_PIX = 175;

const int AV_CODEC_ID_BRENDER_PIX = 176;

const int AV_CODEC_ID_PAF_VIDEO = 177;

const int AV_CODEC_ID_EXR = 178;

const int AV_CODEC_ID_VP7 = 179;

const int AV_CODEC_ID_SANM = 180;

const int AV_CODEC_ID_SGIRLE = 181;

const int AV_CODEC_ID_MVC1 = 182;

const int AV_CODEC_ID_MVC2 = 183;

const int AV_CODEC_ID_HQX = 184;

const int AV_CODEC_ID_TDSC = 185;

const int AV_CODEC_ID_HQ_HQA = 186;

const int AV_CODEC_ID_HAP = 187;

const int AV_CODEC_ID_DDS = 188;

const int AV_CODEC_ID_DXV = 189;

const int AV_CODEC_ID_SCREENPRESSO = 190;

const int AV_CODEC_ID_RSCC = 191;

const int AV_CODEC_ID_AVS2 = 192;

const int AV_CODEC_ID_PGX = 193;

const int AV_CODEC_ID_AVS3 = 194;

const int AV_CODEC_ID_MSP2 = 195;

const int AV_CODEC_ID_VVC = 196;

const int AV_CODEC_ID_H266 = 196;

const int AV_CODEC_ID_Y41P = 197;

const int AV_CODEC_ID_AVRP = 198;

const int AV_CODEC_ID_012V = 199;

const int AV_CODEC_ID_AVUI = 200;

const int AV_CODEC_ID_AYUV = 201;

const int AV_CODEC_ID_TARGA_Y216 = 202;

const int AV_CODEC_ID_V308 = 203;

const int AV_CODEC_ID_V408 = 204;

const int AV_CODEC_ID_YUV4 = 205;

const int AV_CODEC_ID_AVRN = 206;

const int AV_CODEC_ID_CPIA = 207;

const int AV_CODEC_ID_XFACE = 208;

const int AV_CODEC_ID_SNOW = 209;

const int AV_CODEC_ID_SMVJPEG = 210;

const int AV_CODEC_ID_APNG = 211;

const int AV_CODEC_ID_DAALA = 212;

const int AV_CODEC_ID_CFHD = 213;

const int AV_CODEC_ID_TRUEMOTION2RT = 214;

const int AV_CODEC_ID_M101 = 215;

const int AV_CODEC_ID_MAGICYUV = 216;

const int AV_CODEC_ID_SHEERVIDEO = 217;

const int AV_CODEC_ID_YLC = 218;

const int AV_CODEC_ID_PSD = 219;

const int AV_CODEC_ID_PIXLET = 220;

const int AV_CODEC_ID_SPEEDHQ = 221;

const int AV_CODEC_ID_FMVC = 222;

const int AV_CODEC_ID_SCPR = 223;

const int AV_CODEC_ID_CLEARVIDEO = 224;

const int AV_CODEC_ID_XPM = 225;

const int AV_CODEC_ID_AV1 = 226;

const int AV_CODEC_ID_BITPACKED = 227;

const int AV_CODEC_ID_MSCC = 228;

const int AV_CODEC_ID_SRGC = 229;

const int AV_CODEC_ID_SVG = 230;

const int AV_CODEC_ID_GDV = 231;

const int AV_CODEC_ID_FITS = 232;

const int AV_CODEC_ID_IMM4 = 233;

const int AV_CODEC_ID_PROSUMER = 234;

const int AV_CODEC_ID_MWSC = 235;

const int AV_CODEC_ID_WCMV = 236;

const int AV_CODEC_ID_RASC = 237;

const int AV_CODEC_ID_HYMT = 238;

const int AV_CODEC_ID_ARBC = 239;

const int AV_CODEC_ID_AGM = 240;

const int AV_CODEC_ID_LSCR = 241;

const int AV_CODEC_ID_VP4 = 242;

const int AV_CODEC_ID_IMM5 = 243;

const int AV_CODEC_ID_MVDV = 244;

const int AV_CODEC_ID_MVHA = 245;

const int AV_CODEC_ID_CDTOONS = 246;

const int AV_CODEC_ID_MV30 = 247;

const int AV_CODEC_ID_NOTCHLC = 248;

const int AV_CODEC_ID_PFM = 249;

const int AV_CODEC_ID_MOBICLIP = 250;

const int AV_CODEC_ID_PHOTOCD = 251;

const int AV_CODEC_ID_IPU = 252;

const int AV_CODEC_ID_ARGO = 253;

const int AV_CODEC_ID_CRI = 254;

const int AV_CODEC_ID_SIMBIOSIS_IMX = 255;

const int AV_CODEC_ID_SGA_VIDEO = 256;

const int AV_CODEC_ID_GEM = 257;

const int AV_CODEC_ID_FIRST_AUDIO = 65536;

const int AV_CODEC_ID_PCM_S16LE = 65536;

const int AV_CODEC_ID_PCM_S16BE = 65537;

const int AV_CODEC_ID_PCM_U16LE = 65538;

const int AV_CODEC_ID_PCM_U16BE = 65539;

const int AV_CODEC_ID_PCM_S8 = 65540;

const int AV_CODEC_ID_PCM_U8 = 65541;

const int AV_CODEC_ID_PCM_MULAW = 65542;

const int AV_CODEC_ID_PCM_ALAW = 65543;

const int AV_CODEC_ID_PCM_S32LE = 65544;

const int AV_CODEC_ID_PCM_S32BE = 65545;

const int AV_CODEC_ID_PCM_U32LE = 65546;

const int AV_CODEC_ID_PCM_U32BE = 65547;

const int AV_CODEC_ID_PCM_S24LE = 65548;

const int AV_CODEC_ID_PCM_S24BE = 65549;

const int AV_CODEC_ID_PCM_U24LE = 65550;

const int AV_CODEC_ID_PCM_U24BE = 65551;

const int AV_CODEC_ID_PCM_S24DAUD = 65552;

const int AV_CODEC_ID_PCM_ZORK = 65553;

const int AV_CODEC_ID_PCM_S16LE_PLANAR = 65554;

const int AV_CODEC_ID_PCM_DVD = 65555;

const int AV_CODEC_ID_PCM_F32BE = 65556;

const int AV_CODEC_ID_PCM_F32LE = 65557;

const int AV_CODEC_ID_PCM_F64BE = 65558;

const int AV_CODEC_ID_PCM_F64LE = 65559;

const int AV_CODEC_ID_PCM_BLURAY = 65560;

const int AV_CODEC_ID_PCM_LXF = 65561;

const int AV_CODEC_ID_S302M = 65562;

const int AV_CODEC_ID_PCM_S8_PLANAR = 65563;

const int AV_CODEC_ID_PCM_S24LE_PLANAR = 65564;

const int AV_CODEC_ID_PCM_S32LE_PLANAR = 65565;

const int AV_CODEC_ID_PCM_S16BE_PLANAR = 65566;

const int AV_CODEC_ID_PCM_S64LE = 65567;

const int AV_CODEC_ID_PCM_S64BE = 65568;

const int AV_CODEC_ID_PCM_F16LE = 65569;

const int AV_CODEC_ID_PCM_F24LE = 65570;

const int AV_CODEC_ID_PCM_VIDC = 65571;

const int AV_CODEC_ID_PCM_SGA = 65572;

const int AV_CODEC_ID_ADPCM_IMA_QT = 69632;

const int AV_CODEC_ID_ADPCM_IMA_WAV = 69633;

const int AV_CODEC_ID_ADPCM_IMA_DK3 = 69634;

const int AV_CODEC_ID_ADPCM_IMA_DK4 = 69635;

const int AV_CODEC_ID_ADPCM_IMA_WS = 69636;

const int AV_CODEC_ID_ADPCM_IMA_SMJPEG = 69637;

const int AV_CODEC_ID_ADPCM_MS = 69638;

const int AV_CODEC_ID_ADPCM_4XM = 69639;

const int AV_CODEC_ID_ADPCM_XA = 69640;

const int AV_CODEC_ID_ADPCM_ADX = 69641;

const int AV_CODEC_ID_ADPCM_EA = 69642;

const int AV_CODEC_ID_ADPCM_G726 = 69643;

const int AV_CODEC_ID_ADPCM_CT = 69644;

const int AV_CODEC_ID_ADPCM_SWF = 69645;

const int AV_CODEC_ID_ADPCM_YAMAHA = 69646;

const int AV_CODEC_ID_ADPCM_SBPRO_4 = 69647;

const int AV_CODEC_ID_ADPCM_SBPRO_3 = 69648;

const int AV_CODEC_ID_ADPCM_SBPRO_2 = 69649;

const int AV_CODEC_ID_ADPCM_THP = 69650;

const int AV_CODEC_ID_ADPCM_IMA_AMV = 69651;

const int AV_CODEC_ID_ADPCM_EA_R1 = 69652;

const int AV_CODEC_ID_ADPCM_EA_R3 = 69653;

const int AV_CODEC_ID_ADPCM_EA_R2 = 69654;

const int AV_CODEC_ID_ADPCM_IMA_EA_SEAD = 69655;

const int AV_CODEC_ID_ADPCM_IMA_EA_EACS = 69656;

const int AV_CODEC_ID_ADPCM_EA_XAS = 69657;

const int AV_CODEC_ID_ADPCM_EA_MAXIS_XA = 69658;

const int AV_CODEC_ID_ADPCM_IMA_ISS = 69659;

const int AV_CODEC_ID_ADPCM_G722 = 69660;

const int AV_CODEC_ID_ADPCM_IMA_APC = 69661;

const int AV_CODEC_ID_ADPCM_VIMA = 69662;

const int AV_CODEC_ID_ADPCM_AFC = 69663;

const int AV_CODEC_ID_ADPCM_IMA_OKI = 69664;

const int AV_CODEC_ID_ADPCM_DTK = 69665;

const int AV_CODEC_ID_ADPCM_IMA_RAD = 69666;

const int AV_CODEC_ID_ADPCM_G726LE = 69667;

const int AV_CODEC_ID_ADPCM_THP_LE = 69668;

const int AV_CODEC_ID_ADPCM_PSX = 69669;

const int AV_CODEC_ID_ADPCM_AICA = 69670;

const int AV_CODEC_ID_ADPCM_IMA_DAT4 = 69671;

const int AV_CODEC_ID_ADPCM_MTAF = 69672;

const int AV_CODEC_ID_ADPCM_AGM = 69673;

const int AV_CODEC_ID_ADPCM_ARGO = 69674;

const int AV_CODEC_ID_ADPCM_IMA_SSI = 69675;

const int AV_CODEC_ID_ADPCM_ZORK = 69676;

const int AV_CODEC_ID_ADPCM_IMA_APM = 69677;

const int AV_CODEC_ID_ADPCM_IMA_ALP = 69678;

const int AV_CODEC_ID_ADPCM_IMA_MTF = 69679;

const int AV_CODEC_ID_ADPCM_IMA_CUNNING = 69680;

const int AV_CODEC_ID_ADPCM_IMA_MOFLEX = 69681;

const int AV_CODEC_ID_ADPCM_IMA_ACORN = 69682;

const int AV_CODEC_ID_AMR_NB = 73728;

const int AV_CODEC_ID_AMR_WB = 73729;

const int AV_CODEC_ID_RA_144 = 77824;

const int AV_CODEC_ID_RA_288 = 77825;

const int AV_CODEC_ID_ROQ_DPCM = 81920;

const int AV_CODEC_ID_INTERPLAY_DPCM = 81921;

const int AV_CODEC_ID_XAN_DPCM = 81922;

const int AV_CODEC_ID_SOL_DPCM = 81923;

const int AV_CODEC_ID_SDX2_DPCM = 81924;

const int AV_CODEC_ID_GREMLIN_DPCM = 81925;

const int AV_CODEC_ID_DERF_DPCM = 81926;

const int AV_CODEC_ID_MP2 = 86016;

const int AV_CODEC_ID_MP3 = 86017;

const int AV_CODEC_ID_AAC = 86018;

const int AV_CODEC_ID_AC3 = 86019;

const int AV_CODEC_ID_DTS = 86020;

const int AV_CODEC_ID_VORBIS = 86021;

const int AV_CODEC_ID_DVAUDIO = 86022;

const int AV_CODEC_ID_WMAV1 = 86023;

const int AV_CODEC_ID_WMAV2 = 86024;

const int AV_CODEC_ID_MACE3 = 86025;

const int AV_CODEC_ID_MACE6 = 86026;

const int AV_CODEC_ID_VMDAUDIO = 86027;

const int AV_CODEC_ID_FLAC = 86028;

const int AV_CODEC_ID_MP3ADU = 86029;

const int AV_CODEC_ID_MP3ON4 = 86030;

const int AV_CODEC_ID_SHORTEN = 86031;

const int AV_CODEC_ID_ALAC = 86032;

const int AV_CODEC_ID_WESTWOOD_SND1 = 86033;

const int AV_CODEC_ID_GSM = 86034;

const int AV_CODEC_ID_QDM2 = 86035;

const int AV_CODEC_ID_COOK = 86036;

const int AV_CODEC_ID_TRUESPEECH = 86037;

const int AV_CODEC_ID_TTA = 86038;

const int AV_CODEC_ID_SMACKAUDIO = 86039;

const int AV_CODEC_ID_QCELP = 86040;

const int AV_CODEC_ID_WAVPACK = 86041;

const int AV_CODEC_ID_DSICINAUDIO = 86042;

const int AV_CODEC_ID_IMC = 86043;

const int AV_CODEC_ID_MUSEPACK7 = 86044;

const int AV_CODEC_ID_MLP = 86045;

const int AV_CODEC_ID_GSM_MS = 86046;

const int AV_CODEC_ID_ATRAC3 = 86047;

const int AV_CODEC_ID_APE = 86048;

const int AV_CODEC_ID_NELLYMOSER = 86049;

const int AV_CODEC_ID_MUSEPACK8 = 86050;

const int AV_CODEC_ID_SPEEX = 86051;

const int AV_CODEC_ID_WMAVOICE = 86052;

const int AV_CODEC_ID_WMAPRO = 86053;

const int AV_CODEC_ID_WMALOSSLESS = 86054;

const int AV_CODEC_ID_ATRAC3P = 86055;

const int AV_CODEC_ID_EAC3 = 86056;

const int AV_CODEC_ID_SIPR = 86057;

const int AV_CODEC_ID_MP1 = 86058;

const int AV_CODEC_ID_TWINVQ = 86059;

const int AV_CODEC_ID_TRUEHD = 86060;

const int AV_CODEC_ID_MP4ALS = 86061;

const int AV_CODEC_ID_ATRAC1 = 86062;

const int AV_CODEC_ID_BINKAUDIO_RDFT = 86063;

const int AV_CODEC_ID_BINKAUDIO_DCT = 86064;

const int AV_CODEC_ID_AAC_LATM = 86065;

const int AV_CODEC_ID_QDMC = 86066;

const int AV_CODEC_ID_CELT = 86067;

const int AV_CODEC_ID_G723_1 = 86068;

const int AV_CODEC_ID_G729 = 86069;

const int AV_CODEC_ID_8SVX_EXP = 86070;

const int AV_CODEC_ID_8SVX_FIB = 86071;

const int AV_CODEC_ID_BMV_AUDIO = 86072;

const int AV_CODEC_ID_RALF = 86073;

const int AV_CODEC_ID_IAC = 86074;

const int AV_CODEC_ID_ILBC = 86075;

const int AV_CODEC_ID_OPUS = 86076;

const int AV_CODEC_ID_COMFORT_NOISE = 86077;

const int AV_CODEC_ID_TAK = 86078;

const int AV_CODEC_ID_METASOUND = 86079;

const int AV_CODEC_ID_PAF_AUDIO = 86080;

const int AV_CODEC_ID_ON2AVC = 86081;

const int AV_CODEC_ID_DSS_SP = 86082;

const int AV_CODEC_ID_CODEC2 = 86083;

const int AV_CODEC_ID_FFWAVESYNTH = 86084;

const int AV_CODEC_ID_SONIC = 86085;

const int AV_CODEC_ID_SONIC_LS = 86086;

const int AV_CODEC_ID_EVRC = 86087;

const int AV_CODEC_ID_SMV = 86088;

const int AV_CODEC_ID_DSD_LSBF = 86089;

const int AV_CODEC_ID_DSD_MSBF = 86090;

const int AV_CODEC_ID_DSD_LSBF_PLANAR = 86091;

const int AV_CODEC_ID_DSD_MSBF_PLANAR = 86092;

const int AV_CODEC_ID_4GV = 86093;

const int AV_CODEC_ID_INTERPLAY_ACM = 86094;

const int AV_CODEC_ID_XMA1 = 86095;

const int AV_CODEC_ID_XMA2 = 86096;

const int AV_CODEC_ID_DST = 86097;

const int AV_CODEC_ID_ATRAC3AL = 86098;

const int AV_CODEC_ID_ATRAC3PAL = 86099;

const int AV_CODEC_ID_DOLBY_E = 86100;

const int AV_CODEC_ID_APTX = 86101;

const int AV_CODEC_ID_APTX_HD = 86102;

const int AV_CODEC_ID_SBC = 86103;

const int AV_CODEC_ID_ATRAC9 = 86104;

const int AV_CODEC_ID_HCOM = 86105;

const int AV_CODEC_ID_ACELP_KELVIN = 86106;

const int AV_CODEC_ID_MPEGH_3D_AUDIO = 86107;

const int AV_CODEC_ID_SIREN = 86108;

const int AV_CODEC_ID_HCA = 86109;

const int AV_CODEC_ID_FASTAUDIO = 86110;

const int AV_CODEC_ID_MSNSIREN = 86111;

const int AV_CODEC_ID_FIRST_SUBTITLE = 94208;

const int AV_CODEC_ID_DVB_SUBTITLE = 94209;

const int AV_CODEC_ID_TEXT = 94210;

const int AV_CODEC_ID_XSUB = 94211;

const int AV_CODEC_ID_SSA = 94212;

const int AV_CODEC_ID_MOV_TEXT = 94213;

const int AV_CODEC_ID_HDMV_PGS_SUBTITLE = 94214;

const int AV_CODEC_ID_DVB_TELETEXT = 94215;

const int AV_CODEC_ID_SRT = 94216;

const int AV_CODEC_ID_MICRODVD = 94217;

const int AV_CODEC_ID_EIA_608 = 94218;

const int AV_CODEC_ID_JACOSUB = 94219;

const int AV_CODEC_ID_SAMI = 94220;

const int AV_CODEC_ID_REALTEXT = 94221;

const int AV_CODEC_ID_STL = 94222;

const int AV_CODEC_ID_SUBVIEWER1 = 94223;

const int AV_CODEC_ID_SUBVIEWER = 94224;

const int AV_CODEC_ID_SUBRIP = 94225;

const int AV_CODEC_ID_WEBVTT = 94226;

const int AV_CODEC_ID_MPL2 = 94227;

const int AV_CODEC_ID_VPLAYER = 94228;

const int AV_CODEC_ID_PJS = 94229;

const int AV_CODEC_ID_ASS = 94230;

const int AV_CODEC_ID_HDMV_TEXT_SUBTITLE = 94231;

const int AV_CODEC_ID_TTML = 94232;

const int AV_CODEC_ID_ARIB_CAPTION = 94233;

const int AV_CODEC_ID_FIRST_UNKNOWN = 98304;

const int AV_CODEC_ID_TTF = 98304;

const int AV_CODEC_ID_SCTE_35 = 98305;

const int AV_CODEC_ID_EPG = 98306;

const int AV_CODEC_ID_BINTEXT = 98307;

const int AV_CODEC_ID_XBIN = 98308;

const int AV_CODEC_ID_IDF = 98309;

const int AV_CODEC_ID_OTF = 98310;

const int AV_CODEC_ID_SMPTE_KLV = 98311;

const int AV_CODEC_ID_DVD_NAV = 98312;

const int AV_CODEC_ID_TIMED_ID3 = 98313;

const int AV_CODEC_ID_BIN_DATA = 98314;

const int AV_CODEC_ID_PROBE = 102400;

const int AV_CODEC_ID_MPEG2TS = 131072;

const int AV_CODEC_ID_MPEG4SYSTEMS = 131073;

const int AV_CODEC_ID_FFMETADATA = 135168;

const int AV_CODEC_ID_WRAPPED_AVFRAME = 135169;

const int AV_FIELD_UNKNOWN = 0;

const int AV_FIELD_PROGRESSIVE = 1;

const int AV_FIELD_TT = 2;

const int AV_FIELD_BB = 3;

const int AV_FIELD_TB = 4;

const int AV_FIELD_BT = 5;

const int AV_AUDIO_SERVICE_TYPE_MAIN = 0;

const int AV_AUDIO_SERVICE_TYPE_EFFECTS = 1;

const int AV_AUDIO_SERVICE_TYPE_VISUALLY_IMPAIRED = 2;

const int AV_AUDIO_SERVICE_TYPE_HEARING_IMPAIRED = 3;

const int AV_AUDIO_SERVICE_TYPE_DIALOGUE = 4;

const int AV_AUDIO_SERVICE_TYPE_COMMENTARY = 5;

const int AV_AUDIO_SERVICE_TYPE_EMERGENCY = 6;

const int AV_AUDIO_SERVICE_TYPE_VOICE_OVER = 7;

const int AV_AUDIO_SERVICE_TYPE_KARAOKE = 8;

const int AVDISCARD_NONE = -16;

const int AVDISCARD_DEFAULT = 0;

const int AVDISCARD_NONREF = 8;

const int AVDISCARD_BIDIR = 16;

const int AVDISCARD_NONINTRA = 24;

const int AVDISCARD_NONKEY = 32;

const int AVDISCARD_ALL = 48;

const int AV_PKT_DATA_PALETTE = 0;

const int AV_PKT_DATA_NEW_EXTRADATA = 1;

const int AV_PKT_DATA_PARAM_CHANGE = 2;

const int AV_PKT_DATA_H263_MB_INFO = 3;

const int AV_PKT_DATA_REPLAYGAIN = 4;

const int AV_PKT_DATA_DISPLAYMATRIX = 5;

const int AV_PKT_DATA_STEREO3D = 6;

const int AV_PKT_DATA_AUDIO_SERVICE_TYPE = 7;

const int AV_PKT_DATA_QUALITY_STATS = 8;

const int AV_PKT_DATA_FALLBACK_TRACK = 9;

const int AV_PKT_DATA_CPB_PROPERTIES = 10;

const int AV_PKT_DATA_SKIP_SAMPLES = 11;

const int AV_PKT_DATA_JP_DUALMONO = 12;

const int AV_PKT_DATA_STRINGS_METADATA = 13;

const int AV_PKT_DATA_SUBTITLE_POSITION = 14;

const int AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL = 15;

const int AV_PKT_DATA_WEBVTT_IDENTIFIER = 16;

const int AV_PKT_DATA_WEBVTT_SETTINGS = 17;

const int AV_PKT_DATA_METADATA_UPDATE = 18;

const int AV_PKT_DATA_MPEGTS_STREAM_ID = 19;

const int AV_PKT_DATA_MASTERING_DISPLAY_METADATA = 20;

const int AV_PKT_DATA_SPHERICAL = 21;

const int AV_PKT_DATA_CONTENT_LIGHT_LEVEL = 22;

const int AV_PKT_DATA_A53_CC = 23;

const int AV_PKT_DATA_ENCRYPTION_INIT_INFO = 24;

const int AV_PKT_DATA_ENCRYPTION_INFO = 25;

const int AV_PKT_DATA_AFD = 26;

const int AV_PKT_DATA_PRFT = 27;

const int AV_PKT_DATA_ICC_PROFILE = 28;

const int AV_PKT_DATA_DOVI_CONF = 29;

const int AV_PKT_DATA_S12M_TIMECODE = 30;

const int AV_PKT_DATA_DYNAMIC_HDR10_PLUS = 31;

const int AV_PICTURE_TYPE_NONE = 0;

const int AV_PICTURE_TYPE_I = 1;

const int AV_PICTURE_TYPE_P = 2;

const int AV_PICTURE_TYPE_B = 3;

const int AV_PICTURE_TYPE_S = 4;

const int AV_PICTURE_TYPE_SI = 5;

const int AV_PICTURE_TYPE_SP = 6;

const int AV_PICTURE_TYPE_BI = 7;

const int AVMEDIA_TYPE_UNKNOWN = -1;

const int AVMEDIA_TYPE_VIDEO = 0;

const int AVMEDIA_TYPE_AUDIO = 1;

const int AVMEDIA_TYPE_DATA = 2;

const int AVMEDIA_TYPE_SUBTITLE = 3;

const int AVMEDIA_TYPE_ATTACHMENT = 4;

const int AV_FRAME_DATA_PANSCAN = 0;

const int AV_FRAME_DATA_A53_CC = 1;

const int AV_FRAME_DATA_STEREO3D = 2;

const int AV_FRAME_DATA_MATRIXENCODING = 3;

const int AV_FRAME_DATA_DOWNMIX_INFO = 4;

const int AV_FRAME_DATA_REPLAYGAIN = 5;

const int AV_FRAME_DATA_DISPLAYMATRIX = 6;

const int AV_FRAME_DATA_AFD = 7;

const int AV_FRAME_DATA_MOTION_VECTORS = 8;

const int AV_FRAME_DATA_SKIP_SAMPLES = 9;

const int AV_FRAME_DATA_AUDIO_SERVICE_TYPE = 10;

const int AV_FRAME_DATA_MASTERING_DISPLAY_METADATA = 11;

const int AV_FRAME_DATA_GOP_TIMECODE = 12;

const int AV_FRAME_DATA_SPHERICAL = 13;

const int AV_FRAME_DATA_CONTENT_LIGHT_LEVEL = 14;

const int AV_FRAME_DATA_ICC_PROFILE = 15;

const int AV_FRAME_DATA_S12M_TIMECODE = 16;

const int AV_FRAME_DATA_DYNAMIC_HDR_PLUS = 17;

const int AV_FRAME_DATA_REGIONS_OF_INTEREST = 18;

const int AV_FRAME_DATA_VIDEO_ENC_PARAMS = 19;

const int AV_FRAME_DATA_SEI_UNREGISTERED = 20;

const int AV_FRAME_DATA_FILM_GRAIN_PARAMS = 21;

const int AV_FRAME_DATA_DETECTION_BBOXES = 22;

const int AV_FRAME_DATA_DOVI_RPU_BUFFER = 23;

const int AV_FRAME_DATA_DOVI_METADATA = 24;

const int AV_HWDEVICE_TYPE_NONE = 0;

const int AV_HWDEVICE_TYPE_VDPAU = 1;

const int AV_HWDEVICE_TYPE_CUDA = 2;

const int AV_HWDEVICE_TYPE_VAAPI = 3;

const int AV_HWDEVICE_TYPE_DXVA2 = 4;

const int AV_HWDEVICE_TYPE_QSV = 5;

const int AV_HWDEVICE_TYPE_VIDEOTOOLBOX = 6;

const int AV_HWDEVICE_TYPE_D3D11VA = 7;

const int AV_HWDEVICE_TYPE_DRM = 8;

const int AV_HWDEVICE_TYPE_OPENCL = 9;

const int AV_HWDEVICE_TYPE_MEDIACODEC = 10;

const int AV_HWDEVICE_TYPE_VULKAN = 11;

const int AV_CLASS_CATEGORY_NA = 0;

const int AV_CLASS_CATEGORY_INPUT = 1;

const int AV_CLASS_CATEGORY_OUTPUT = 2;

const int AV_CLASS_CATEGORY_MUXER = 3;

const int AV_CLASS_CATEGORY_DEMUXER = 4;

const int AV_CLASS_CATEGORY_ENCODER = 5;

const int AV_CLASS_CATEGORY_DECODER = 6;

const int AV_CLASS_CATEGORY_FILTER = 7;

const int AV_CLASS_CATEGORY_BITSTREAM_FILTER = 8;

const int AV_CLASS_CATEGORY_SWSCALER = 9;

const int AV_CLASS_CATEGORY_SWRESAMPLER = 10;

const int AV_CLASS_CATEGORY_DEVICE_VIDEO_OUTPUT = 40;

const int AV_CLASS_CATEGORY_DEVICE_VIDEO_INPUT = 41;

const int AV_CLASS_CATEGORY_DEVICE_AUDIO_OUTPUT = 42;

const int AV_CLASS_CATEGORY_DEVICE_AUDIO_INPUT = 43;

const int AV_CLASS_CATEGORY_DEVICE_OUTPUT = 44;

const int AV_CLASS_CATEGORY_DEVICE_INPUT = 45;

const int AV_OPT_TYPE_FLAGS = 0;

const int AV_OPT_TYPE_INT = 1;

const int AV_OPT_TYPE_INT64 = 2;

const int AV_OPT_TYPE_DOUBLE = 3;

const int AV_OPT_TYPE_FLOAT = 4;

const int AV_OPT_TYPE_STRING = 5;

const int AV_OPT_TYPE_RATIONAL = 6;

const int AV_OPT_TYPE_BINARY = 7;

const int AV_OPT_TYPE_DICT = 8;

const int AV_OPT_TYPE_UINT64 = 9;

const int AV_OPT_TYPE_CONST = 10;

const int AV_OPT_TYPE_IMAGE_SIZE = 11;

const int AV_OPT_TYPE_PIXEL_FMT = 12;

const int AV_OPT_TYPE_SAMPLE_FMT = 13;

const int AV_OPT_TYPE_VIDEO_RATE = 14;

const int AV_OPT_TYPE_DURATION = 15;

const int AV_OPT_TYPE_COLOR = 16;

const int AV_OPT_TYPE_CHANNEL_LAYOUT = 17;

const int AV_OPT_TYPE_BOOL = 18;

const int AVCOL_RANGE_UNSPECIFIED = 0;

const int AVCOL_RANGE_MPEG = 1;

const int AVCOL_RANGE_JPEG = 2;

const int AVCOL_PRI_RESERVED0 = 0;

const int AVCOL_PRI_BT709 = 1;

const int AVCOL_PRI_UNSPECIFIED = 2;

const int AVCOL_PRI_RESERVED = 3;

const int AVCOL_PRI_BT470M = 4;

const int AVCOL_PRI_BT470BG = 5;

const int AVCOL_PRI_SMPTE170M = 6;

const int AVCOL_PRI_SMPTE240M = 7;

const int AVCOL_PRI_FILM = 8;

const int AVCOL_PRI_BT2020 = 9;

const int AVCOL_PRI_SMPTE428 = 10;

const int AVCOL_PRI_SMPTEST428_1 = 10;

const int AVCOL_PRI_SMPTE431 = 11;

const int AVCOL_PRI_SMPTE432 = 12;

const int AVCOL_PRI_EBU3213 = 22;

const int AVCOL_PRI_JEDEC_P22 = 22;

const int AVCOL_TRC_RESERVED0 = 0;

const int AVCOL_TRC_BT709 = 1;

const int AVCOL_TRC_UNSPECIFIED = 2;

const int AVCOL_TRC_RESERVED = 3;

const int AVCOL_TRC_GAMMA22 = 4;

const int AVCOL_TRC_GAMMA28 = 5;

const int AVCOL_TRC_SMPTE170M = 6;

const int AVCOL_TRC_SMPTE240M = 7;

const int AVCOL_TRC_LINEAR = 8;

const int AVCOL_TRC_LOG = 9;

const int AVCOL_TRC_LOG_SQRT = 10;

const int AVCOL_TRC_IEC61966_2_4 = 11;

const int AVCOL_TRC_BT1361_ECG = 12;

const int AVCOL_TRC_IEC61966_2_1 = 13;

const int AVCOL_TRC_BT2020_10 = 14;

const int AVCOL_TRC_BT2020_12 = 15;

const int AVCOL_TRC_SMPTE2084 = 16;

const int AVCOL_TRC_SMPTEST2084 = 16;

const int AVCOL_TRC_SMPTE428 = 17;

const int AVCOL_TRC_SMPTEST428_1 = 17;

const int AVCOL_TRC_ARIB_STD_B67 = 18;

const int AVCOL_SPC_RGB = 0;

const int AVCOL_SPC_BT709 = 1;

const int AVCOL_SPC_UNSPECIFIED = 2;

const int AVCOL_SPC_RESERVED = 3;

const int AVCOL_SPC_FCC = 4;

const int AVCOL_SPC_BT470BG = 5;

const int AVCOL_SPC_SMPTE170M = 6;

const int AVCOL_SPC_SMPTE240M = 7;

const int AVCOL_SPC_YCGCO = 8;

const int AVCOL_SPC_YCOCG = 8;

const int AVCOL_SPC_BT2020_NCL = 9;

const int AVCOL_SPC_BT2020_CL = 10;

const int AVCOL_SPC_SMPTE2085 = 11;

const int AVCOL_SPC_CHROMA_DERIVED_NCL = 12;

const int AVCOL_SPC_CHROMA_DERIVED_CL = 13;

const int AVCOL_SPC_ICTCP = 14;

const int AVCHROMA_LOC_UNSPECIFIED = 0;

const int AVCHROMA_LOC_LEFT = 1;

const int AVCHROMA_LOC_CENTER = 2;

const int AVCHROMA_LOC_TOPLEFT = 3;

const int AVCHROMA_LOC_TOP = 4;

const int AVCHROMA_LOC_BOTTOMLEFT = 5;

const int AVCHROMA_LOC_BOTTOM = 6;

const int AV_PIX_FMT_NONE = -1;

const int AV_PIX_FMT_YUV420P = 0;

const int AV_PIX_FMT_YUYV422 = 1;

const int AV_PIX_FMT_RGB24 = 2;

const int AV_PIX_FMT_BGR24 = 3;

const int AV_PIX_FMT_YUV422P = 4;

const int AV_PIX_FMT_YUV444P = 5;

const int AV_PIX_FMT_YUV410P = 6;

const int AV_PIX_FMT_YUV411P = 7;

const int AV_PIX_FMT_GRAY8 = 8;

const int AV_PIX_FMT_MONOWHITE = 9;

const int AV_PIX_FMT_MONOBLACK = 10;

const int AV_PIX_FMT_PAL8 = 11;

const int AV_PIX_FMT_YUVJ420P = 12;

const int AV_PIX_FMT_YUVJ422P = 13;

const int AV_PIX_FMT_YUVJ444P = 14;

const int AV_PIX_FMT_UYVY422 = 15;

const int AV_PIX_FMT_UYYVYY411 = 16;

const int AV_PIX_FMT_BGR8 = 17;

const int AV_PIX_FMT_BGR4 = 18;

const int AV_PIX_FMT_BGR4_BYTE = 19;

const int AV_PIX_FMT_RGB8 = 20;

const int AV_PIX_FMT_RGB4 = 21;

const int AV_PIX_FMT_RGB4_BYTE = 22;

const int AV_PIX_FMT_NV12 = 23;

const int AV_PIX_FMT_NV21 = 24;

const int AV_PIX_FMT_ARGB = 25;

const int AV_PIX_FMT_RGBA = 26;

const int AV_PIX_FMT_ABGR = 27;

const int AV_PIX_FMT_BGRA = 28;

const int AV_PIX_FMT_GRAY16BE = 29;

const int AV_PIX_FMT_GRAY16LE = 30;

const int AV_PIX_FMT_YUV440P = 31;

const int AV_PIX_FMT_YUVJ440P = 32;

const int AV_PIX_FMT_YUVA420P = 33;

const int AV_PIX_FMT_RGB48BE = 34;

const int AV_PIX_FMT_RGB48LE = 35;

const int AV_PIX_FMT_RGB565BE = 36;

const int AV_PIX_FMT_RGB565LE = 37;

const int AV_PIX_FMT_RGB555BE = 38;

const int AV_PIX_FMT_RGB555LE = 39;

const int AV_PIX_FMT_BGR565BE = 40;

const int AV_PIX_FMT_BGR565LE = 41;

const int AV_PIX_FMT_BGR555BE = 42;

const int AV_PIX_FMT_BGR555LE = 43;

const int AV_PIX_FMT_VAAPI = 44;

const int AV_PIX_FMT_YUV420P16LE = 45;

const int AV_PIX_FMT_YUV420P16BE = 46;

const int AV_PIX_FMT_YUV422P16LE = 47;

const int AV_PIX_FMT_YUV422P16BE = 48;

const int AV_PIX_FMT_YUV444P16LE = 49;

const int AV_PIX_FMT_YUV444P16BE = 50;

const int AV_PIX_FMT_DXVA2_VLD = 51;

const int AV_PIX_FMT_RGB444LE = 52;

const int AV_PIX_FMT_RGB444BE = 53;

const int AV_PIX_FMT_BGR444LE = 54;

const int AV_PIX_FMT_BGR444BE = 55;

const int AV_PIX_FMT_YA8 = 56;

const int AV_PIX_FMT_Y400A = 56;

const int AV_PIX_FMT_GRAY8A = 56;

const int AV_PIX_FMT_BGR48BE = 57;

const int AV_PIX_FMT_BGR48LE = 58;

const int AV_PIX_FMT_YUV420P9BE = 59;

const int AV_PIX_FMT_YUV420P9LE = 60;

const int AV_PIX_FMT_YUV420P10BE = 61;

const int AV_PIX_FMT_YUV420P10LE = 62;

const int AV_PIX_FMT_YUV422P10BE = 63;

const int AV_PIX_FMT_YUV422P10LE = 64;

const int AV_PIX_FMT_YUV444P9BE = 65;

const int AV_PIX_FMT_YUV444P9LE = 66;

const int AV_PIX_FMT_YUV444P10BE = 67;

const int AV_PIX_FMT_YUV444P10LE = 68;

const int AV_PIX_FMT_YUV422P9BE = 69;

const int AV_PIX_FMT_YUV422P9LE = 70;

const int AV_PIX_FMT_GBRP = 71;

const int AV_PIX_FMT_GBR24P = 71;

const int AV_PIX_FMT_GBRP9BE = 72;

const int AV_PIX_FMT_GBRP9LE = 73;

const int AV_PIX_FMT_GBRP10BE = 74;

const int AV_PIX_FMT_GBRP10LE = 75;

const int AV_PIX_FMT_GBRP16BE = 76;

const int AV_PIX_FMT_GBRP16LE = 77;

const int AV_PIX_FMT_YUVA422P = 78;

const int AV_PIX_FMT_YUVA444P = 79;

const int AV_PIX_FMT_YUVA420P9BE = 80;

const int AV_PIX_FMT_YUVA420P9LE = 81;

const int AV_PIX_FMT_YUVA422P9BE = 82;

const int AV_PIX_FMT_YUVA422P9LE = 83;

const int AV_PIX_FMT_YUVA444P9BE = 84;

const int AV_PIX_FMT_YUVA444P9LE = 85;

const int AV_PIX_FMT_YUVA420P10BE = 86;

const int AV_PIX_FMT_YUVA420P10LE = 87;

const int AV_PIX_FMT_YUVA422P10BE = 88;

const int AV_PIX_FMT_YUVA422P10LE = 89;

const int AV_PIX_FMT_YUVA444P10BE = 90;

const int AV_PIX_FMT_YUVA444P10LE = 91;

const int AV_PIX_FMT_YUVA420P16BE = 92;

const int AV_PIX_FMT_YUVA420P16LE = 93;

const int AV_PIX_FMT_YUVA422P16BE = 94;

const int AV_PIX_FMT_YUVA422P16LE = 95;

const int AV_PIX_FMT_YUVA444P16BE = 96;

const int AV_PIX_FMT_YUVA444P16LE = 97;

const int AV_PIX_FMT_VDPAU = 98;

const int AV_PIX_FMT_XYZ12LE = 99;

const int AV_PIX_FMT_XYZ12BE = 100;

const int AV_PIX_FMT_NV16 = 101;

const int AV_PIX_FMT_NV20LE = 102;

const int AV_PIX_FMT_NV20BE = 103;

const int AV_PIX_FMT_RGBA64BE = 104;

const int AV_PIX_FMT_RGBA64LE = 105;

const int AV_PIX_FMT_BGRA64BE = 106;

const int AV_PIX_FMT_BGRA64LE = 107;

const int AV_PIX_FMT_YVYU422 = 108;

const int AV_PIX_FMT_YA16BE = 109;

const int AV_PIX_FMT_YA16LE = 110;

const int AV_PIX_FMT_GBRAP = 111;

const int AV_PIX_FMT_GBRAP16BE = 112;

const int AV_PIX_FMT_GBRAP16LE = 113;

const int AV_PIX_FMT_QSV = 114;

const int AV_PIX_FMT_MMAL = 115;

const int AV_PIX_FMT_D3D11VA_VLD = 116;

const int AV_PIX_FMT_CUDA = 117;

const int AV_PIX_FMT_0RGB = 118;

const int AV_PIX_FMT_RGB0 = 119;

const int AV_PIX_FMT_0BGR = 120;

const int AV_PIX_FMT_BGR0 = 121;

const int AV_PIX_FMT_YUV420P12BE = 122;

const int AV_PIX_FMT_YUV420P12LE = 123;

const int AV_PIX_FMT_YUV420P14BE = 124;

const int AV_PIX_FMT_YUV420P14LE = 125;

const int AV_PIX_FMT_YUV422P12BE = 126;

const int AV_PIX_FMT_YUV422P12LE = 127;

const int AV_PIX_FMT_YUV422P14BE = 128;

const int AV_PIX_FMT_YUV422P14LE = 129;

const int AV_PIX_FMT_YUV444P12BE = 130;

const int AV_PIX_FMT_YUV444P12LE = 131;

const int AV_PIX_FMT_YUV444P14BE = 132;

const int AV_PIX_FMT_YUV444P14LE = 133;

const int AV_PIX_FMT_GBRP12BE = 134;

const int AV_PIX_FMT_GBRP12LE = 135;

const int AV_PIX_FMT_GBRP14BE = 136;

const int AV_PIX_FMT_GBRP14LE = 137;

const int AV_PIX_FMT_YUVJ411P = 138;

const int AV_PIX_FMT_BAYER_BGGR8 = 139;

const int AV_PIX_FMT_BAYER_RGGB8 = 140;

const int AV_PIX_FMT_BAYER_GBRG8 = 141;

const int AV_PIX_FMT_BAYER_GRBG8 = 142;

const int AV_PIX_FMT_BAYER_BGGR16LE = 143;

const int AV_PIX_FMT_BAYER_BGGR16BE = 144;

const int AV_PIX_FMT_BAYER_RGGB16LE = 145;

const int AV_PIX_FMT_BAYER_RGGB16BE = 146;

const int AV_PIX_FMT_BAYER_GBRG16LE = 147;

const int AV_PIX_FMT_BAYER_GBRG16BE = 148;

const int AV_PIX_FMT_BAYER_GRBG16LE = 149;

const int AV_PIX_FMT_BAYER_GRBG16BE = 150;

const int AV_PIX_FMT_XVMC = 151;

const int AV_PIX_FMT_YUV440P10LE = 152;

const int AV_PIX_FMT_YUV440P10BE = 153;

const int AV_PIX_FMT_YUV440P12LE = 154;

const int AV_PIX_FMT_YUV440P12BE = 155;

const int AV_PIX_FMT_AYUV64LE = 156;

const int AV_PIX_FMT_AYUV64BE = 157;

const int AV_PIX_FMT_VIDEOTOOLBOX = 158;

const int AV_PIX_FMT_P010LE = 159;

const int AV_PIX_FMT_P010BE = 160;

const int AV_PIX_FMT_GBRAP12BE = 161;

const int AV_PIX_FMT_GBRAP12LE = 162;

const int AV_PIX_FMT_GBRAP10BE = 163;

const int AV_PIX_FMT_GBRAP10LE = 164;

const int AV_PIX_FMT_MEDIACODEC = 165;

const int AV_PIX_FMT_GRAY12BE = 166;

const int AV_PIX_FMT_GRAY12LE = 167;

const int AV_PIX_FMT_GRAY10BE = 168;

const int AV_PIX_FMT_GRAY10LE = 169;

const int AV_PIX_FMT_P016LE = 170;

const int AV_PIX_FMT_P016BE = 171;

const int AV_PIX_FMT_D3D11 = 172;

const int AV_PIX_FMT_GRAY9BE = 173;

const int AV_PIX_FMT_GRAY9LE = 174;

const int AV_PIX_FMT_GBRPF32BE = 175;

const int AV_PIX_FMT_GBRPF32LE = 176;

const int AV_PIX_FMT_GBRAPF32BE = 177;

const int AV_PIX_FMT_GBRAPF32LE = 178;

const int AV_PIX_FMT_DRM_PRIME = 179;

const int AV_PIX_FMT_OPENCL = 180;

const int AV_PIX_FMT_GRAY14BE = 181;

const int AV_PIX_FMT_GRAY14LE = 182;

const int AV_PIX_FMT_GRAYF32BE = 183;

const int AV_PIX_FMT_GRAYF32LE = 184;

const int AV_PIX_FMT_YUVA422P12BE = 185;

const int AV_PIX_FMT_YUVA422P12LE = 186;

const int AV_PIX_FMT_YUVA444P12BE = 187;

const int AV_PIX_FMT_YUVA444P12LE = 188;

const int AV_PIX_FMT_NV24 = 189;

const int AV_PIX_FMT_NV42 = 190;

const int AV_PIX_FMT_VULKAN = 191;

const int AV_PIX_FMT_Y210BE = 192;

const int AV_PIX_FMT_Y210LE = 193;

const int AV_PIX_FMT_X2RGB10LE = 194;

const int AV_PIX_FMT_X2RGB10BE = 195;

const int AV_PIX_FMT_X2BGR10LE = 196;

const int AV_PIX_FMT_X2BGR10BE = 197;

const int AV_PIX_FMT_P210BE = 198;

const int AV_PIX_FMT_P210LE = 199;

const int AV_PIX_FMT_P410BE = 200;

const int AV_PIX_FMT_P410LE = 201;

const int AV_PIX_FMT_P216BE = 202;

const int AV_PIX_FMT_P216LE = 203;

const int AV_PIX_FMT_P416BE = 204;

const int AV_PIX_FMT_P416LE = 205;

const int AV_SAMPLE_FMT_NONE = -1;

const int AV_SAMPLE_FMT_U8 = 0;

const int AV_SAMPLE_FMT_S16 = 1;

const int AV_SAMPLE_FMT_S32 = 2;

const int AV_SAMPLE_FMT_FLT = 3;

const int AV_SAMPLE_FMT_DBL = 4;

const int AV_SAMPLE_FMT_U8P = 5;

const int AV_SAMPLE_FMT_S16P = 6;

const int AV_SAMPLE_FMT_S32P = 7;

const int AV_SAMPLE_FMT_FLTP = 8;

const int AV_SAMPLE_FMT_DBLP = 9;

const int AV_SAMPLE_FMT_S64 = 10;

const int AV_SAMPLE_FMT_S64P = 11;
