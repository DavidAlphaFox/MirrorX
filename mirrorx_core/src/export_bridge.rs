#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.45.0.

use crate::export::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;

// Section: imports

use crate::api::config::ConfigProperties;
use crate::api::signaling::dial::DialRequest;
use crate::api::signaling::heartbeat::HeartbeatRequest;
use crate::api::signaling::heartbeat::HeartbeatResponse;
use crate::api::signaling::key_exchange::KeyExchangeRequest;
use crate::api::signaling::key_exchange::KeyExchangeResponse;
use crate::api::signaling::register::RegisterRequest;
use crate::api::signaling::register::RegisterResponse;
use crate::api::signaling::subscribe::PublishMessage;
use crate::api::signaling::subscribe::SubscribeRequest;
use crate::api::signaling::visit::ResourceType;
use crate::api::signaling::visit::VisitRequest;
use crate::api::signaling::visit::VisitResponse;

// Section: wire functions

fn wire_logger_init_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "logger_init",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| logger_init(),
    )
}
fn wire_config_read_impl(
    port_: MessagePort,
    path: impl Wire2Api<String> + UnwindSafe,
    key: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "config_read",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_path = path.wire2api();
            let api_key = key.wire2api();
            move |task_callback| config_read(api_path, api_key)
        },
    )
}
fn wire_config_save_impl(
    port_: MessagePort,
    path: impl Wire2Api<String> + UnwindSafe,
    key: impl Wire2Api<String> + UnwindSafe,
    properties: impl Wire2Api<ConfigProperties> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "config_save",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_path = path.wire2api();
            let api_key = key.wire2api();
            let api_properties = properties.wire2api();
            move |task_callback| config_save(api_path, api_key, api_properties)
        },
    )
}
fn wire_signaling_dial_impl(port_: MessagePort, req: impl Wire2Api<DialRequest> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "signaling_dial",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_req = req.wire2api();
            move |task_callback| signaling_dial(api_req)
        },
    )
}
fn wire_signaling_register_impl(
    port_: MessagePort,
    req: impl Wire2Api<RegisterRequest> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "signaling_register",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_req = req.wire2api();
            move |task_callback| signaling_register(api_req)
        },
    )
}
fn wire_signaling_subscribe_impl(
    port_: MessagePort,
    req: impl Wire2Api<SubscribeRequest> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "signaling_subscribe",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_req = req.wire2api();
            move |task_callback| signaling_subscribe(api_req, task_callback.stream_sink())
        },
    )
}
fn wire_signaling_heartbeat_impl(
    port_: MessagePort,
    req: impl Wire2Api<HeartbeatRequest> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "signaling_heartbeat",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_req = req.wire2api();
            move |task_callback| signaling_heartbeat(api_req)
        },
    )
}
fn wire_signaling_visit_impl(port_: MessagePort, req: impl Wire2Api<VisitRequest> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "signaling_visit",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_req = req.wire2api();
            move |task_callback| signaling_visit(api_req)
        },
    )
}
fn wire_signaling_key_exchange_impl(
    port_: MessagePort,
    req: impl Wire2Api<KeyExchangeRequest> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "signaling_key_exchange",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_req = req.wire2api();
            move |task_callback| signaling_key_exchange(api_req)
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}

impl Wire2Api<ResourceType> for i32 {
    fn wire2api(self) -> ResourceType {
        match self {
            0 => ResourceType::Desktop,
            1 => ResourceType::Files,
            _ => unreachable!("Invalid variant for ResourceType: {}", self),
        }
    }
}

impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for ConfigProperties {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.device_id.into_dart(),
            self.device_finger_print.into_dart(),
            self.device_password.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ConfigProperties {}

impl support::IntoDart for HeartbeatResponse {
    fn into_dart(self) -> support::DartAbi {
        vec![self.timestamp.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for HeartbeatResponse {}

impl support::IntoDart for KeyExchangeResponse {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.opening_key_bytes.into_dart(),
            self.opening_nonce_bytes.into_dart(),
            self.sealing_key_bytes.into_dart(),
            self.sealing_nonce_bytes.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for KeyExchangeResponse {}

impl support::IntoDart for PublishMessage {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::StreamClosed => vec![0.into_dart()],
            Self::VisitRequest {
                active_device_id,
                passive_device_id,
                resource_type,
            } => vec![
                1.into_dart(),
                active_device_id.into_dart(),
                passive_device_id.into_dart(),
                resource_type.into_dart(),
            ],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for PublishMessage {}
impl support::IntoDart for RegisterResponse {
    fn into_dart(self) -> support::DartAbi {
        vec![self.device_id.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for RegisterResponse {}

impl support::IntoDart for ResourceType {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Desktop => 0,
            Self::Files => 1,
        }
        .into_dart()
    }
}

impl support::IntoDart for VisitResponse {
    fn into_dart(self) -> support::DartAbi {
        vec![self.allow.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for VisitResponse {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "export_bridge.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
