#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.45.0.

use crate::api::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;

// Section: imports

use crate::component::input::key::KeyboardKey;
use crate::component::input::key::MouseKey;
use crate::constants::os::LinuxType;
use crate::constants::os::OperatingSystemType;
use crate::service::endpoint::message::DisplayInfo;
use crate::service::endpoint::message::GetDisplayInfoResponse;
use crate::service::endpoint::message::InputEvent;
use crate::service::endpoint::message::KeyboardEvent;
use crate::service::endpoint::message::MouseEvent;
use crate::service::endpoint::message::StartMediaTransmissionResponse;

// Section: wire functions

fn wire_init_impl(
    port_: MessagePort,
    os_version: impl Wire2Api<String> + UnwindSafe,
    config_dir: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "init",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_os_version = os_version.wire2api();
            let api_config_dir = config_dir.wire2api();
            move |task_callback| init(api_os_version, api_config_dir)
        },
    )
}
fn wire_config_read_device_id_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "config_read_device_id",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| config_read_device_id(),
    )
}
fn wire_config_save_device_id_impl(
    port_: MessagePort,
    device_id: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "config_save_device_id",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_device_id = device_id.wire2api();
            move |task_callback| config_save_device_id(api_device_id)
        },
    )
}
fn wire_config_read_device_id_expiration_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "config_read_device_id_expiration",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| config_read_device_id_expiration(),
    )
}
fn wire_config_save_device_id_expiration_impl(
    port_: MessagePort,
    time_stamp: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "config_save_device_id_expiration",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_time_stamp = time_stamp.wire2api();
            move |task_callback| config_save_device_id_expiration(api_time_stamp)
        },
    )
}
fn wire_config_read_device_password_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "config_read_device_password",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| config_read_device_password(),
    )
}
fn wire_config_save_device_password_impl(
    port_: MessagePort,
    device_password: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "config_save_device_password",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_device_password = device_password.wire2api();
            move |task_callback| config_save_device_password(api_device_password)
        },
    )
}
fn wire_signaling_connect_impl(
    port_: MessagePort,
    remote_device_id: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "signaling_connect",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_remote_device_id = remote_device_id.wire2api();
            move |task_callback| signaling_connect(api_remote_device_id)
        },
    )
}
fn wire_signaling_connection_key_exchange_impl(
    port_: MessagePort,
    remote_device_id: impl Wire2Api<String> + UnwindSafe,
    password: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "signaling_connection_key_exchange",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_remote_device_id = remote_device_id.wire2api();
            let api_password = password.wire2api();
            move |task_callback| {
                signaling_connection_key_exchange(api_remote_device_id, api_password)
            }
        },
    )
}
fn wire_endpoint_get_display_info_impl(
    port_: MessagePort,
    remote_device_id: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "endpoint_get_display_info",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_remote_device_id = remote_device_id.wire2api();
            move |task_callback| endpoint_get_display_info(api_remote_device_id)
        },
    )
}
fn wire_endpoint_start_media_transmission_impl(
    port_: MessagePort,
    remote_device_id: impl Wire2Api<String> + UnwindSafe,
    expect_fps: impl Wire2Api<u8> + UnwindSafe,
    expect_display_id: impl Wire2Api<String> + UnwindSafe,
    texture_id: impl Wire2Api<i64> + UnwindSafe,
    video_texture_ptr: impl Wire2Api<i64> + UnwindSafe,
    update_frame_callback_ptr: impl Wire2Api<i64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "endpoint_start_media_transmission",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_remote_device_id = remote_device_id.wire2api();
            let api_expect_fps = expect_fps.wire2api();
            let api_expect_display_id = expect_display_id.wire2api();
            let api_texture_id = texture_id.wire2api();
            let api_video_texture_ptr = video_texture_ptr.wire2api();
            let api_update_frame_callback_ptr = update_frame_callback_ptr.wire2api();
            move |task_callback| {
                endpoint_start_media_transmission(
                    api_remote_device_id,
                    api_expect_fps,
                    api_expect_display_id,
                    api_texture_id,
                    api_video_texture_ptr,
                    api_update_frame_callback_ptr,
                )
            }
        },
    )
}
fn wire_endpoint_input_impl(
    port_: MessagePort,
    remote_device_id: impl Wire2Api<String> + UnwindSafe,
    event: impl Wire2Api<InputEvent> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "endpoint_input",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_remote_device_id = remote_device_id.wire2api();
            let api_event = event.wire2api();
            move |task_callback| endpoint_input(api_remote_device_id, api_event)
        },
    )
}
fn wire_endpoint_manually_close_impl(
    port_: MessagePort,
    remote_device_id: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "endpoint_manually_close",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_remote_device_id = remote_device_id.wire2api();
            move |task_callback| endpoint_manually_close(api_remote_device_id)
        },
    )
}
fn wire_endpoint_close_notify_impl(
    port_: MessagePort,
    remote_device_id: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "endpoint_close_notify",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_remote_device_id = remote_device_id.wire2api();
            move |task_callback| {
                endpoint_close_notify(api_remote_device_id, task_callback.stream_sink())
            }
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<f32> for f32 {
    fn wire2api(self) -> f32 {
        self
    }
}
impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}
impl Wire2Api<i64> for i64 {
    fn wire2api(self) -> i64 {
        self
    }
}

impl Wire2Api<KeyboardKey> for i32 {
    fn wire2api(self) -> KeyboardKey {
        match self {
            0 => KeyboardKey::A,
            1 => KeyboardKey::B,
            2 => KeyboardKey::C,
            3 => KeyboardKey::D,
            4 => KeyboardKey::E,
            5 => KeyboardKey::F,
            6 => KeyboardKey::G,
            7 => KeyboardKey::H,
            8 => KeyboardKey::I,
            9 => KeyboardKey::J,
            10 => KeyboardKey::K,
            11 => KeyboardKey::L,
            12 => KeyboardKey::M,
            13 => KeyboardKey::N,
            14 => KeyboardKey::O,
            15 => KeyboardKey::P,
            16 => KeyboardKey::Q,
            17 => KeyboardKey::R,
            18 => KeyboardKey::S,
            19 => KeyboardKey::T,
            20 => KeyboardKey::U,
            21 => KeyboardKey::V,
            22 => KeyboardKey::W,
            23 => KeyboardKey::X,
            24 => KeyboardKey::Y,
            25 => KeyboardKey::Z,
            26 => KeyboardKey::BackQuote,
            27 => KeyboardKey::Digit0,
            28 => KeyboardKey::Digit1,
            29 => KeyboardKey::Digit2,
            30 => KeyboardKey::Digit3,
            31 => KeyboardKey::Digit4,
            32 => KeyboardKey::Digit5,
            33 => KeyboardKey::Digit6,
            34 => KeyboardKey::Digit7,
            35 => KeyboardKey::Digit8,
            36 => KeyboardKey::Digit9,
            37 => KeyboardKey::Minus,
            38 => KeyboardKey::Equal,
            39 => KeyboardKey::Tab,
            40 => KeyboardKey::CapsLock,
            41 => KeyboardKey::LeftShift,
            42 => KeyboardKey::LeftControl,
            43 => KeyboardKey::LeftAlt,
            44 => KeyboardKey::LeftMeta,
            45 => KeyboardKey::Space,
            46 => KeyboardKey::RightMeta,
            47 => KeyboardKey::RightControl,
            48 => KeyboardKey::RightAlt,
            49 => KeyboardKey::RightShift,
            50 => KeyboardKey::Comma,
            51 => KeyboardKey::Period,
            52 => KeyboardKey::Slash,
            53 => KeyboardKey::Semicolon,
            54 => KeyboardKey::QuoteSingle,
            55 => KeyboardKey::Enter,
            56 => KeyboardKey::BracketLeft,
            57 => KeyboardKey::BracketRight,
            58 => KeyboardKey::BackSlash,
            59 => KeyboardKey::Backspace,
            60 => KeyboardKey::NumLock,
            61 => KeyboardKey::NumpadEquals,
            62 => KeyboardKey::NumpadDivide,
            63 => KeyboardKey::NumpadMultiply,
            64 => KeyboardKey::NumpadSubtract,
            65 => KeyboardKey::NumpadAdd,
            66 => KeyboardKey::NumpadEnter,
            67 => KeyboardKey::Numpad0,
            68 => KeyboardKey::Numpad1,
            69 => KeyboardKey::Numpad2,
            70 => KeyboardKey::Numpad3,
            71 => KeyboardKey::Numpad4,
            72 => KeyboardKey::Numpad5,
            73 => KeyboardKey::Numpad6,
            74 => KeyboardKey::Numpad7,
            75 => KeyboardKey::Numpad8,
            76 => KeyboardKey::Numpad9,
            77 => KeyboardKey::NumpadDecimal,
            78 => KeyboardKey::ArrowLeft,
            79 => KeyboardKey::ArrowUp,
            80 => KeyboardKey::ArrowRight,
            81 => KeyboardKey::ArrowDown,
            82 => KeyboardKey::Escape,
            83 => KeyboardKey::PrintScreen,
            84 => KeyboardKey::ScrollLock,
            85 => KeyboardKey::Pause,
            86 => KeyboardKey::Insert,
            87 => KeyboardKey::Delete,
            88 => KeyboardKey::Home,
            89 => KeyboardKey::End,
            90 => KeyboardKey::PageUp,
            91 => KeyboardKey::PageDown,
            92 => KeyboardKey::F1,
            93 => KeyboardKey::F2,
            94 => KeyboardKey::F3,
            95 => KeyboardKey::F4,
            96 => KeyboardKey::F5,
            97 => KeyboardKey::F6,
            98 => KeyboardKey::F7,
            99 => KeyboardKey::F8,
            100 => KeyboardKey::F9,
            101 => KeyboardKey::F10,
            102 => KeyboardKey::F11,
            103 => KeyboardKey::F12,
            104 => KeyboardKey::Fn,
            _ => unreachable!("Invalid variant for KeyboardKey: {}", self),
        }
    }
}

impl Wire2Api<MouseKey> for i32 {
    fn wire2api(self) -> MouseKey {
        match self {
            0 => MouseKey::None,
            1 => MouseKey::Left,
            2 => MouseKey::Right,
            3 => MouseKey::Wheel,
            4 => MouseKey::SideForward,
            5 => MouseKey::SideBack,
            _ => unreachable!("Invalid variant for MouseKey: {}", self),
        }
    }
}
impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for DisplayInfo {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_dart(),
            self.name.into_dart(),
            self.refresh_rate.into_dart(),
            self.width.into_dart(),
            self.height.into_dart(),
            self.is_primary.into_dart(),
            self.screen_shot.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DisplayInfo {}

impl support::IntoDart for GetDisplayInfoResponse {
    fn into_dart(self) -> support::DartAbi {
        vec![self.displays.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for GetDisplayInfoResponse {}

impl support::IntoDart for KeyExchangeResp {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.sealing_key_bytes.into_dart(),
            self.sealing_nonce_bytes.into_dart(),
            self.opening_key_bytes.into_dart(),
            self.opening_nonce_bytes.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for KeyExchangeResp {}

impl support::IntoDart for LinuxType {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::CentOS => 0,
            Self::Fedora => 1,
            Self::Redhat => 2,
            Self::openSUSE => 3,
            Self::Ubuntu => 4,
            Self::Other => 5,
        }
        .into_dart()
    }
}

impl support::IntoDart for OperatingSystemType {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Windows => vec![0.into_dart()],
            Self::macOS => vec![1.into_dart()],
            Self::iOS => vec![2.into_dart()],
            Self::Android => vec![3.into_dart()],
            Self::Linux(field0) => vec![4.into_dart(), field0.into_dart()],
            Self::Unknown => vec![5.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for OperatingSystemType {}

impl support::IntoDart for StartMediaTransmissionResponse {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.os_type.into_dart(),
            self.os_version.into_dart(),
            self.screen_width.into_dart(),
            self.screen_height.into_dart(),
            self.video_type.into_dart(),
            self.audio_type.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for StartMediaTransmissionResponse {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
