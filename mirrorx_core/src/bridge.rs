#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

use crate::api::api::*;
use flutter_rust_bridge::*;

// Section: imports

use crate::component::input::key::KeyboardKey;
use crate::component::input::key::MouseKey;
use crate::service::endpoint::message::DisplayInfo;
use crate::service::endpoint::message::GetDisplayInfoResponse;
use crate::service::endpoint::message::InputEvent;
use crate::service::endpoint::message::KeyboardEvent;
use crate::service::endpoint::message::MouseEvent;
use crate::service::endpoint::message::StartMediaTransmissionResponse;

// Section: wire functions

#[no_mangle]
pub extern "C" fn wire_init(
    port_: i64,
    os_type: *mut wire_uint_8_list,
    os_version: *mut wire_uint_8_list,
    config_dir: *mut wire_uint_8_list,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "init",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_os_type = os_type.wire2api();
            let api_os_version = os_version.wire2api();
            let api_config_dir = config_dir.wire2api();
            move |task_callback| init(api_os_type, api_os_version, api_config_dir)
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_config_read_device_id(port_: i64) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "config_read_device_id",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| config_read_device_id(),
    )
}

#[no_mangle]
pub extern "C" fn wire_config_save_device_id(port_: i64, device_id: *mut wire_uint_8_list) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "config_save_device_id",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_device_id = device_id.wire2api();
            move |task_callback| config_save_device_id(api_device_id)
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_config_read_device_id_expiration(port_: i64) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "config_read_device_id_expiration",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| config_read_device_id_expiration(),
    )
}

#[no_mangle]
pub extern "C" fn wire_config_save_device_id_expiration(port_: i64, time_stamp: i32) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "config_save_device_id_expiration",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_time_stamp = time_stamp.wire2api();
            move |task_callback| config_save_device_id_expiration(api_time_stamp)
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_config_read_device_password(port_: i64) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "config_read_device_password",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| config_read_device_password(),
    )
}

#[no_mangle]
pub extern "C" fn wire_config_save_device_password(
    port_: i64,
    device_password: *mut wire_uint_8_list,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "config_save_device_password",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_device_password = device_password.wire2api();
            move |task_callback| config_save_device_password(api_device_password)
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_signaling_connect(port_: i64, remote_device_id: *mut wire_uint_8_list) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "signaling_connect",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_remote_device_id = remote_device_id.wire2api();
            move |task_callback| signaling_connect(api_remote_device_id)
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_signaling_connection_key_exchange(
    port_: i64,
    remote_device_id: *mut wire_uint_8_list,
    password: *mut wire_uint_8_list,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "signaling_connection_key_exchange",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_remote_device_id = remote_device_id.wire2api();
            let api_password = password.wire2api();
            move |task_callback| {
                signaling_connection_key_exchange(api_remote_device_id, api_password)
            }
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_endpoint_get_display_info(
    port_: i64,
    remote_device_id: *mut wire_uint_8_list,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "endpoint_get_display_info",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_remote_device_id = remote_device_id.wire2api();
            move |task_callback| endpoint_get_display_info(api_remote_device_id)
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_endpoint_start_media_transmission(
    port_: i64,
    remote_device_id: *mut wire_uint_8_list,
    expect_fps: u8,
    expect_display_id: *mut wire_uint_8_list,
    texture_id: i64,
    video_texture_ptr: i64,
    update_frame_callback_ptr: i64,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "endpoint_start_media_transmission",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_remote_device_id = remote_device_id.wire2api();
            let api_expect_fps = expect_fps.wire2api();
            let api_expect_display_id = expect_display_id.wire2api();
            let api_texture_id = texture_id.wire2api();
            let api_video_texture_ptr = video_texture_ptr.wire2api();
            let api_update_frame_callback_ptr = update_frame_callback_ptr.wire2api();
            move |task_callback| {
                endpoint_start_media_transmission(
                    api_remote_device_id,
                    api_expect_fps,
                    api_expect_display_id,
                    api_texture_id,
                    api_video_texture_ptr,
                    api_update_frame_callback_ptr,
                )
            }
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_endpoint_input(
    port_: i64,
    remote_device_id: *mut wire_uint_8_list,
    event: *mut wire_InputEvent,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "endpoint_input",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_remote_device_id = remote_device_id.wire2api();
            let api_event = event.wire2api();
            move |task_callback| endpoint_input(api_remote_device_id, api_event)
        },
    )
}

// Section: wire structs

#[repr(C)]
#[derive(Clone)]
pub struct wire_uint_8_list {
    ptr: *mut u8,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_InputEvent {
    tag: i32,
    kind: *mut InputEventKind,
}

#[repr(C)]
pub union InputEventKind {
    Mouse: *mut InputEvent_Mouse,
    Keyboard: *mut InputEvent_Keyboard,
}

#[repr(C)]
#[derive(Clone)]
pub struct InputEvent_Mouse {
    field0: *mut wire_MouseEvent,
}

#[repr(C)]
#[derive(Clone)]
pub struct InputEvent_Keyboard {
    field0: *mut wire_KeyboardEvent,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_KeyboardEvent {
    tag: i32,
    kind: *mut KeyboardEventKind,
}

#[repr(C)]
pub union KeyboardEventKind {
    KeyUp: *mut KeyboardEvent_KeyUp,
    KeyDown: *mut KeyboardEvent_KeyDown,
}

#[repr(C)]
#[derive(Clone)]
pub struct KeyboardEvent_KeyUp {
    field0: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct KeyboardEvent_KeyDown {
    field0: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_MouseEvent {
    tag: i32,
    kind: *mut MouseEventKind,
}

#[repr(C)]
pub union MouseEventKind {
    MouseUp: *mut MouseEvent_MouseUp,
    MouseDown: *mut MouseEvent_MouseDown,
    MouseMove: *mut MouseEvent_MouseMove,
    MouseScrollWheel: *mut MouseEvent_MouseScrollWheel,
}

#[repr(C)]
#[derive(Clone)]
pub struct MouseEvent_MouseUp {
    field0: i32,
    field1: f32,
    field2: f32,
}

#[repr(C)]
#[derive(Clone)]
pub struct MouseEvent_MouseDown {
    field0: i32,
    field1: f32,
    field2: f32,
}

#[repr(C)]
#[derive(Clone)]
pub struct MouseEvent_MouseMove {
    field0: i32,
    field1: f32,
    field2: f32,
}

#[repr(C)]
#[derive(Clone)]
pub struct MouseEvent_MouseScrollWheel {
    field0: f32,
}

// Section: wrapper structs

// Section: static checks

// Section: allocate functions

#[no_mangle]
pub extern "C" fn new_box_autoadd_input_event_0() -> *mut wire_InputEvent {
    support::new_leak_box_ptr(wire_InputEvent::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn new_box_autoadd_keyboard_event_0() -> *mut wire_KeyboardEvent {
    support::new_leak_box_ptr(wire_KeyboardEvent::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn new_box_autoadd_mouse_event_0() -> *mut wire_MouseEvent {
    support::new_leak_box_ptr(wire_MouseEvent::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn new_uint_8_list_0(len: i32) -> *mut wire_uint_8_list {
    let ans = wire_uint_8_list {
        ptr: support::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    support::new_leak_box_ptr(ans)
}

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<String> for *mut wire_uint_8_list {
    fn wire2api(self) -> String {
        let vec: Vec<u8> = self.wire2api();
        String::from_utf8_lossy(&vec).into_owned()
    }
}

impl Wire2Api<InputEvent> for *mut wire_InputEvent {
    fn wire2api(self) -> InputEvent {
        let wrap = unsafe { support::box_from_leak_ptr(self) };
        Wire2Api::<InputEvent>::wire2api(*wrap).into()
    }
}

impl Wire2Api<KeyboardEvent> for *mut wire_KeyboardEvent {
    fn wire2api(self) -> KeyboardEvent {
        let wrap = unsafe { support::box_from_leak_ptr(self) };
        Wire2Api::<KeyboardEvent>::wire2api(*wrap).into()
    }
}

impl Wire2Api<MouseEvent> for *mut wire_MouseEvent {
    fn wire2api(self) -> MouseEvent {
        let wrap = unsafe { support::box_from_leak_ptr(self) };
        Wire2Api::<MouseEvent>::wire2api(*wrap).into()
    }
}

impl Wire2Api<f32> for f32 {
    fn wire2api(self) -> f32 {
        self
    }
}

impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}

impl Wire2Api<i64> for i64 {
    fn wire2api(self) -> i64 {
        self
    }
}

impl Wire2Api<InputEvent> for wire_InputEvent {
    fn wire2api(self) -> InputEvent {
        match self.tag {
            0 => unsafe {
                let ans = support::box_from_leak_ptr(self.kind);
                let ans = support::box_from_leak_ptr(ans.Mouse);
                InputEvent::Mouse(ans.field0.wire2api())
            },
            1 => unsafe {
                let ans = support::box_from_leak_ptr(self.kind);
                let ans = support::box_from_leak_ptr(ans.Keyboard);
                InputEvent::Keyboard(ans.field0.wire2api())
            },
            _ => unreachable!(),
        }
    }
}

impl Wire2Api<KeyboardEvent> for wire_KeyboardEvent {
    fn wire2api(self) -> KeyboardEvent {
        match self.tag {
            0 => unsafe {
                let ans = support::box_from_leak_ptr(self.kind);
                let ans = support::box_from_leak_ptr(ans.KeyUp);
                KeyboardEvent::KeyUp(ans.field0.wire2api())
            },
            1 => unsafe {
                let ans = support::box_from_leak_ptr(self.kind);
                let ans = support::box_from_leak_ptr(ans.KeyDown);
                KeyboardEvent::KeyDown(ans.field0.wire2api())
            },
            _ => unreachable!(),
        }
    }
}

impl Wire2Api<KeyboardKey> for i32 {
    fn wire2api(self) -> KeyboardKey {
        match self {
            0 => KeyboardKey::A,
            1 => KeyboardKey::B,
            2 => KeyboardKey::C,
            3 => KeyboardKey::D,
            4 => KeyboardKey::E,
            5 => KeyboardKey::F,
            6 => KeyboardKey::G,
            7 => KeyboardKey::H,
            8 => KeyboardKey::I,
            9 => KeyboardKey::J,
            10 => KeyboardKey::K,
            11 => KeyboardKey::L,
            12 => KeyboardKey::M,
            13 => KeyboardKey::N,
            14 => KeyboardKey::O,
            15 => KeyboardKey::P,
            16 => KeyboardKey::Q,
            17 => KeyboardKey::R,
            18 => KeyboardKey::S,
            19 => KeyboardKey::T,
            20 => KeyboardKey::U,
            21 => KeyboardKey::V,
            22 => KeyboardKey::W,
            23 => KeyboardKey::X,
            24 => KeyboardKey::Y,
            25 => KeyboardKey::Z,
            26 => KeyboardKey::BackQuote,
            27 => KeyboardKey::Digit0,
            28 => KeyboardKey::Digit1,
            29 => KeyboardKey::Digit2,
            30 => KeyboardKey::Digit3,
            31 => KeyboardKey::Digit4,
            32 => KeyboardKey::Digit5,
            33 => KeyboardKey::Digit6,
            34 => KeyboardKey::Digit7,
            35 => KeyboardKey::Digit8,
            36 => KeyboardKey::Digit9,
            37 => KeyboardKey::Minus,
            38 => KeyboardKey::Equal,
            39 => KeyboardKey::Tab,
            40 => KeyboardKey::CapsLock,
            41 => KeyboardKey::LeftShift,
            42 => KeyboardKey::LeftControl,
            43 => KeyboardKey::LeftAlt,
            44 => KeyboardKey::LeftMeta,
            45 => KeyboardKey::Space,
            46 => KeyboardKey::RightMeta,
            47 => KeyboardKey::RightControl,
            48 => KeyboardKey::RightAlt,
            49 => KeyboardKey::RightShift,
            50 => KeyboardKey::Comma,
            51 => KeyboardKey::Period,
            52 => KeyboardKey::Slash,
            53 => KeyboardKey::Semicolon,
            54 => KeyboardKey::QuoteSingle,
            55 => KeyboardKey::Enter,
            56 => KeyboardKey::BracketLeft,
            57 => KeyboardKey::BracketRight,
            58 => KeyboardKey::BackSlash,
            59 => KeyboardKey::Backspace,
            60 => KeyboardKey::NumLock,
            61 => KeyboardKey::NumpadEquals,
            62 => KeyboardKey::NumpadDivide,
            63 => KeyboardKey::NumpadMultiply,
            64 => KeyboardKey::NumpadSubtract,
            65 => KeyboardKey::NumpadAdd,
            66 => KeyboardKey::NumpadEnter,
            67 => KeyboardKey::Numpad0,
            68 => KeyboardKey::Numpad1,
            69 => KeyboardKey::Numpad2,
            70 => KeyboardKey::Numpad3,
            71 => KeyboardKey::Numpad4,
            72 => KeyboardKey::Numpad5,
            73 => KeyboardKey::Numpad6,
            74 => KeyboardKey::Numpad7,
            75 => KeyboardKey::Numpad8,
            76 => KeyboardKey::Numpad9,
            77 => KeyboardKey::NumpadDecimal,
            78 => KeyboardKey::ArrowLeft,
            79 => KeyboardKey::ArrowUp,
            80 => KeyboardKey::ArrowRight,
            81 => KeyboardKey::ArrowDown,
            82 => KeyboardKey::Escape,
            83 => KeyboardKey::PrintScreen,
            84 => KeyboardKey::ScrollLock,
            85 => KeyboardKey::Pause,
            86 => KeyboardKey::Insert,
            87 => KeyboardKey::Delete,
            88 => KeyboardKey::Home,
            89 => KeyboardKey::End,
            90 => KeyboardKey::PageUp,
            91 => KeyboardKey::PageDown,
            92 => KeyboardKey::F1,
            93 => KeyboardKey::F2,
            94 => KeyboardKey::F3,
            95 => KeyboardKey::F4,
            96 => KeyboardKey::F5,
            97 => KeyboardKey::F6,
            98 => KeyboardKey::F7,
            99 => KeyboardKey::F8,
            100 => KeyboardKey::F9,
            101 => KeyboardKey::F10,
            102 => KeyboardKey::F11,
            103 => KeyboardKey::F12,
            104 => KeyboardKey::Fn,
            _ => unreachable!("Invalid variant for KeyboardKey: {}", self),
        }
    }
}

impl Wire2Api<MouseEvent> for wire_MouseEvent {
    fn wire2api(self) -> MouseEvent {
        match self.tag {
            0 => unsafe {
                let ans = support::box_from_leak_ptr(self.kind);
                let ans = support::box_from_leak_ptr(ans.MouseUp);
                MouseEvent::MouseUp(
                    ans.field0.wire2api(),
                    ans.field1.wire2api(),
                    ans.field2.wire2api(),
                )
            },
            1 => unsafe {
                let ans = support::box_from_leak_ptr(self.kind);
                let ans = support::box_from_leak_ptr(ans.MouseDown);
                MouseEvent::MouseDown(
                    ans.field0.wire2api(),
                    ans.field1.wire2api(),
                    ans.field2.wire2api(),
                )
            },
            2 => unsafe {
                let ans = support::box_from_leak_ptr(self.kind);
                let ans = support::box_from_leak_ptr(ans.MouseMove);
                MouseEvent::MouseMove(
                    ans.field0.wire2api(),
                    ans.field1.wire2api(),
                    ans.field2.wire2api(),
                )
            },
            3 => unsafe {
                let ans = support::box_from_leak_ptr(self.kind);
                let ans = support::box_from_leak_ptr(ans.MouseScrollWheel);
                MouseEvent::MouseScrollWheel(ans.field0.wire2api())
            },
            _ => unreachable!(),
        }
    }
}

impl Wire2Api<MouseKey> for i32 {
    fn wire2api(self) -> MouseKey {
        match self {
            0 => MouseKey::None,
            1 => MouseKey::Left,
            2 => MouseKey::Right,
            3 => MouseKey::Wheel,
            4 => MouseKey::SideForward,
            5 => MouseKey::SideBack,
            _ => unreachable!("Invalid variant for MouseKey: {}", self),
        }
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
    fn wire2api(self) -> Vec<u8> {
        unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}

// Section: impl NewWithNullPtr

pub trait NewWithNullPtr {
    fn new_with_null_ptr() -> Self;
}

impl<T> NewWithNullPtr for *mut T {
    fn new_with_null_ptr() -> Self {
        std::ptr::null_mut()
    }
}

impl NewWithNullPtr for wire_InputEvent {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}

#[no_mangle]
pub extern "C" fn inflate_InputEvent_Mouse() -> *mut InputEventKind {
    support::new_leak_box_ptr(InputEventKind {
        Mouse: support::new_leak_box_ptr(InputEvent_Mouse {
            field0: core::ptr::null_mut(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn inflate_InputEvent_Keyboard() -> *mut InputEventKind {
    support::new_leak_box_ptr(InputEventKind {
        Keyboard: support::new_leak_box_ptr(InputEvent_Keyboard {
            field0: core::ptr::null_mut(),
        }),
    })
}

impl NewWithNullPtr for wire_KeyboardEvent {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}

#[no_mangle]
pub extern "C" fn inflate_KeyboardEvent_KeyUp() -> *mut KeyboardEventKind {
    support::new_leak_box_ptr(KeyboardEventKind {
        KeyUp: support::new_leak_box_ptr(KeyboardEvent_KeyUp {
            field0: Default::default(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn inflate_KeyboardEvent_KeyDown() -> *mut KeyboardEventKind {
    support::new_leak_box_ptr(KeyboardEventKind {
        KeyDown: support::new_leak_box_ptr(KeyboardEvent_KeyDown {
            field0: Default::default(),
        }),
    })
}

impl NewWithNullPtr for wire_MouseEvent {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}

#[no_mangle]
pub extern "C" fn inflate_MouseEvent_MouseUp() -> *mut MouseEventKind {
    support::new_leak_box_ptr(MouseEventKind {
        MouseUp: support::new_leak_box_ptr(MouseEvent_MouseUp {
            field0: Default::default(),
            field1: Default::default(),
            field2: Default::default(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn inflate_MouseEvent_MouseDown() -> *mut MouseEventKind {
    support::new_leak_box_ptr(MouseEventKind {
        MouseDown: support::new_leak_box_ptr(MouseEvent_MouseDown {
            field0: Default::default(),
            field1: Default::default(),
            field2: Default::default(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn inflate_MouseEvent_MouseMove() -> *mut MouseEventKind {
    support::new_leak_box_ptr(MouseEventKind {
        MouseMove: support::new_leak_box_ptr(MouseEvent_MouseMove {
            field0: Default::default(),
            field1: Default::default(),
            field2: Default::default(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn inflate_MouseEvent_MouseScrollWheel() -> *mut MouseEventKind {
    support::new_leak_box_ptr(MouseEventKind {
        MouseScrollWheel: support::new_leak_box_ptr(MouseEvent_MouseScrollWheel {
            field0: Default::default(),
        }),
    })
}

// Section: impl IntoDart

impl support::IntoDart for DisplayInfo {
    fn into_dart(self) -> support::DartCObject {
        vec![
            self.id.into_dart(),
            self.name.into_dart(),
            self.refresh_rate.into_dart(),
            self.width.into_dart(),
            self.height.into_dart(),
            self.is_primary.into_dart(),
            self.screen_shot.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DisplayInfo {}

impl support::IntoDart for GetDisplayInfoResponse {
    fn into_dart(self) -> support::DartCObject {
        vec![self.displays.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for GetDisplayInfoResponse {}

impl support::IntoDart for StartMediaTransmissionResponse {
    fn into_dart(self) -> support::DartCObject {
        vec![
            self.os_name.into_dart(),
            self.os_version.into_dart(),
            self.screen_width.into_dart(),
            self.screen_height.into_dart(),
            self.video_type.into_dart(),
            self.audio_type.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for StartMediaTransmissionResponse {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

// Section: sync execution mode utility

#[no_mangle]
pub extern "C" fn free_WireSyncReturnStruct(val: support::WireSyncReturnStruct) {
    unsafe {
        let _ = support::vec_from_leak_ptr(val.ptr, val.len);
    }
}
